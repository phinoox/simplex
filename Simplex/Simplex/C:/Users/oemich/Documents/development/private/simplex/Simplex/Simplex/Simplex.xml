<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Simplex</name>
    </assembly>
    <members>
        <member name="T:Simplex.ApplicationBase">
            <summary>
            This class is the main entry class for an application based on this library
            For more convinient usage you can inherit it or simply use the events
            </summary>
        </member>
        <member name="E:Simplex.ApplicationBase.TickHandler">
            <summary>
            eventhandler for engine tick events
            </summary>
        </member>
        <member name="M:Simplex.ApplicationBase.#ctor">
            <summary>
            default constructor
            ToDo : change to singleton pattern
            </summary>
        </member>
        <member name="P:Simplex.ApplicationBase.Instance">
            <summary>
            the instance of the application
            </summary>
        </member>
        <member name="P:Simplex.ApplicationBase.MainWindow">
            <summary>
            returns the initially created window
            </summary>
        </member>
        <member name="P:Simplex.ApplicationBase.ShouldClose">
            <summary>
            for safe closing of the application set this to true
            </summary>
        </member>
        <member name="M:Simplex.ApplicationBase.onInit(System.String[])">
            <summary>
            gets called on engine initialization after base configs have been loaded
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Simplex.ApplicationBase.onTick(System.Single)">
            <summary>
            gets called from the mainloop before rendering
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:Simplex.ApplicationBase.Init(System.String[])">
             <summary>
            Initializes the application and loads the configurations
             </summary>
             <param name="args"> command line arguments</param>
             <returns></returns>
        </member>
        <member name="M:Simplex.ApplicationBase.Run">
            <summary>
            starts the main loop
            </summary>
        </member>
        <member name="T:Simplex.FrameEventArgs">
            <summary>
            Eventargs for the applications tick event
            </summary>
        </member>
        <member name="F:Simplex.FrameEventArgs.deltaTime">
            <summary>
            time in milliseconds since the last frame
            </summary>
        </member>
        <member name="T:Simplex.CommonRes">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Simplex.CommonRes.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Simplex.CommonRes.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Simplex.CommonRes.OpenSans_Regular">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="T:Simplex.Configs.ApplicationConfig">
            <summary>
            Base configuration for the application
            </summary>
        </member>
        <member name="P:Simplex.Configs.ApplicationConfig.DataDirectory1">
            <summary>
            the path to the data/assets
            </summary>
        </member>
        <member name="P:Simplex.Configs.ApplicationConfig.Fps">
            <summary>
            the fps limit
            </summary>
        </member>
        <member name="P:Simplex.Configs.ApplicationConfig.Title">
            <summary>
            the title of the application
            </summary>
        </member>
        <member name="T:Simplex.Gui.Color">
            <summary>
            Represent ARGB color.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Color.R">
            <summary>
            Red value.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Color.G">
            <summary>
            Green value.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Color.B">
            <summary>
            Blue value.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Color.A">
            <summary>
            Alpha value.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Color.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes new color. Alpha value is 255.
            </summary>
            <param name="r">Red value.</param>
            <param name="g">Green value.</param>
            <param name="b">Blue value.</param>
        </member>
        <member name="M:Simplex.Gui.Color.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes new color.
            </summary>
            <param name="a">Alpha value.</param>
            <param name="r">Red value.</param>
            <param name="g">Green value.</param>
            <param name="b">Blue value.</param>
        </member>
        <member name="M:Simplex.Gui.Color.#ctor(System.UInt32)">
            <summary>
            Initializes new color.
            </summary>
            <param name="value">32 bit color value as 0xAARRGGBB. Alpha value 0 is treated as 255.</param>
        </member>
        <member name="M:Simplex.Gui.Color.FromName(System.String)">
            <summary>
            Get color by name.
            </summary>
            <param name="name">HTML color name supported by browsers.</param>
            <returns>Color if named value exists, color black otherwise.</returns>
        </member>
        <member name="T:Simplex.Gui.CommonDialog.FileDialog">
            <summary>
            Base class for a file or directory dialog.
            </summary>
        </member>
        <member name="P:Simplex.Gui.CommonDialog.FileDialog.InitialFolder">
            <summary>
            Initial folder for the dialog.
            </summary>
        </member>
        <member name="P:Simplex.Gui.CommonDialog.FileDialog.CurrentItem">
            <summary>
            Set initial folder and selected item.
            </summary>
        </member>
        <member name="P:Simplex.Gui.CommonDialog.FileDialog.Title">
            <summary>
            Window title.
            </summary>
        </member>
        <member name="P:Simplex.Gui.CommonDialog.FileDialog.Filters">
            <summary>
            File filters. See <see cref="M:Simplex.Gui.CommonDialog.FileDialog.SetFilters(System.String,System.Int32)"/>.
            </summary>
        </member>
        <member name="P:Simplex.Gui.CommonDialog.FileDialog.OkButtonText">
            <summary>
            Text shown in the ok button.
            </summary>
        </member>
        <member name="P:Simplex.Gui.CommonDialog.FileDialog.Callback">
            <summary>
            Function that is called when dialog is closed. If ok is pressed, parameter is the selected file / directory.
            If cancel is pressed or window closed, parameter is null.
            </summary>
        </member>
        <member name="P:Simplex.Gui.CommonDialog.FileDialog.EnableNewFolder">
            <summary>
            Hide or show new folder button.
            </summary>
        </member>
        <member name="P:Simplex.Gui.CommonDialog.FileDialog.FoldersOnly">
            <summary>
            Show only directories.
            </summary>
        </member>
        <member name="M:Simplex.Gui.CommonDialog.FileDialog.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Constructor for the base class. Implementing classes must call this.
            </summary>
            <param name="parent">Parent.</param>
        </member>
        <member name="M:Simplex.Gui.CommonDialog.FileDialog.SetPath(System.String)">
            <summary>
            Set current path.
            </summary>
            <param name="path">Path.</param>
            <returns>True if the path change was successful. False otherwise.</returns>
        </member>
        <member name="M:Simplex.Gui.CommonDialog.FileDialog.SetFilters(System.String,System.Int32)">
            <summary>
            Set filters.
            </summary>
            <param name="filterStr">Filter string. Format 'name|filter[|name|filter]...'</param>
            <param name="current">Set this index as a current filter.</param>
        </member>
        <member name="M:Simplex.Gui.CommonDialog.FileDialog.SetCurrentItem(System.String)">
            <summary>
            Set current file or directory.
            </summary>
            <param name="item">File or directory. This doesn't need to exists.</param>
        </member>
        <member name="M:Simplex.Gui.CommonDialog.FileDialog.Close(System.String)">
            <summary>
            Close the dialog and call the call back function.
            </summary>
            <param name="path">Parameter for the call back function.</param>
        </member>
        <member name="M:Simplex.Gui.CommonDialog.FileDialog.OnItemSelected(System.String)">
            <summary>
            Called when the user selects a file or directory.
            </summary>
            <param name="path">Full path of selected file or directory.</param>
        </member>
        <member name="M:Simplex.Gui.CommonDialog.FileDialog.IsSubmittedNameOk(System.String)">
            <summary>
            Called to validate the file or directory name when the user enters it.
            </summary>
            <param name="path">Full path of the name.</param>
            <returns>Is the name valid.</returns>
        </member>
        <member name="M:Simplex.Gui.CommonDialog.FileDialog.ValidateFileName(System.String)">
            <summary>
            Called to validate the path when the user presses the ok button.
            </summary>
            <param name="path">Full path.</param>
            <returns>Is the path valid.</returns>
        </member>
        <member name="M:Simplex.Gui.CommonDialog.FileDialog.OnClosing(System.String,System.Boolean)">
            <summary>
            Called when the dialog is closing.
            </summary>
            <param name="path">Path for the call back function</param>
            <param name="doClose">True if the dialog needs to be closed.</param>
        </member>
        <member name="T:Simplex.Gui.CommonDialog.FolderBrowserDialog">
            <summary>
            Dialog for selecting an existing directory.
            </summary>
        </member>
        <member name="T:Simplex.Gui.CommonDialog.OpenFileDialog">
            <summary>
            Dialog for selecting an existing file.
            </summary>
        </member>
        <member name="T:Simplex.Gui.CommonDialog.SaveFileDialog">
            <summary>
            Dialog for selecting a file name for saving or creating.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Control.ImageAlign">
            <summary>
            Image alignment inside the button
            </summary>
        </member>
        <member name="T:Simplex.Gui.Control.Button">
            <summary>
            Button control.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Button.Text">
            <summary>
            Text.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Button.Font">
            <summary>
            Font.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Button.TextColor">
            <summary>
            Text color.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Button.TextColorOverride">
            <summary>
            Override text color (used by tooltips).
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Button.TextPadding">
            <summary>
            Text padding.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Button.Alignment">
            <summary>
            Text alignment.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Button.ImageAlign">
            <summary>
            Determines how the image is aligned inside the button.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Button.ImageName">
            <summary>
            Returns the current image name (or null if no image set) or set a new image.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Button.ImageSize">
            <summary>
            Gets or sets the size of the image.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Button.ImageTextureRect">
            <summary>
            Gets or sets the texture coordinates of the image in pixels.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Button.ImageColor">
            <summary>
            Gets or sets the color of the image.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Button.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Control constructor.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Button.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Button.SetImage(System.String,Simplex.Gui.Control.ImageAlign)">
            <summary>
            Sets the button's image.
            </summary>
            <param name="textureName">Texture name. Null to remove.</param>
            <param name="imageAlign">Determines how the image should be aligned.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Button.UpdateColors">
            <summary>
            Updates control colors.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Control.Canvas">
            <summary>
            Canvas control. It should be the root parent for all other controls.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Canvas.Scale">
            <summary>
            Scale for rendering.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Canvas.BackgroundColor">
            <summary>
            Background color.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Canvas.NeedsRedraw">
            <summary>
            In most situations you will be rendering the canvas every frame. 
            But in some situations you will only want to render when there have been changes. 
            You can do this by checking NeedsRedraw.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Canvas.#ctor(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Canvas"/> class.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Canvas.Redraw">
            <summary>
            Re-renders the control, invalidates cached texture.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Canvas.RenderCanvas">
            <summary>
            Renders the canvas. Call in your rendering loop.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Canvas.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Canvas.OnBoundsChanged(Simplex.Gui.Rectangle)">
            <summary>
            Handler invoked when control's bounds change.
            </summary>
            <param name="oldBounds">Old bounds.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Canvas.DoThink">
            <summary>
            Processes input and layout. Also purges delayed delete queue.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Canvas.AddDelayedDelete(Simplex.Gui.Control.ControlBase)">
            <summary>
            Adds given control to the delete queue and detaches it from canvas. Don't call from Dispose, it modifies child list.
            </summary>
            <param name="control">Control to delete.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Canvas.Input_MouseMoved(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Handles mouse movement events. Called from Input subsystems.
            </summary>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.Canvas.Input_MouseButton(System.Int32,System.Boolean)">
            <summary>
            Handles mouse button events. Called from Input subsystems.
            </summary>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.Canvas.Input_Key(Simplex.Gui.Key,System.Boolean)">
            <summary>
            Handles keyboard events. Called from Input subsystems.
            </summary>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.Canvas.Input_Character(System.Char)">
            <summary>
            Handles keyboard events. Called from Input subsystems.
            </summary>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.Canvas.Input_MouseWheel(System.Int32)">
            <summary>
            Handles the mouse wheel events. Called from Input subsystems.
            </summary>
            <returns>True if handled.</returns>
        </member>
        <member name="T:Simplex.Gui.Control.CheckBox">
            <summary>
            CheckBox control.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.CheckBox.IsChecked">
            <summary>
            Indicates whether the checkbox is checked.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.CheckBox.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.CheckBox"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.CheckBox.Toggle">
            <summary>
            Toggles the checkbox.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.CheckBox.Checked">
            <summary>
            Invoked when the checkbox has been checked.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.CheckBox.UnChecked">
            <summary>
            Invoked when the checkbox has been unchecked.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.CheckBox.CheckChanged">
            <summary>
            Invoked when the checkbox state has been changed.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.CheckBox.AllowUncheck">
            <summary>
            Determines whether unchecking is allowed.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.CheckBox.OnCheckChanged">
            <summary>
            Handler for CheckChanged event.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.CheckBox.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.CheckBox.OnClicked(System.Int32,System.Int32)">
            <summary>
            Internal OnPressed implementation.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Control.CollapsibleCategory">
            <summary>
            CollapsibleCategory control. Used in CollapsibleList.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.CollapsibleCategory.Text">
            <summary>
            Header text.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.CollapsibleCategory.IsCategoryCollapsed">
            <summary>
            Determines whether the category is collapsed (closed).
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.CollapsibleCategory.Selected">
            <summary>
            Invoked when an entry has been selected.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.CollapsibleCategory.Collapsed">
            <summary>
            Invoked when the category collapsed state has been changed (header button has been pressed).
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.CollapsibleCategory.#ctor(Simplex.Gui.Control.CollapsibleList)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.CollapsibleCategory"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.CollapsibleCategory.GetSelectedButton">
            <summary>
            Gets the selected entry.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.CollapsibleCategory.OnHeaderToggle(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Handler for header button toggle event.
            </summary>
            <param name="control">Source control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.CollapsibleCategory.OnSelected(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Handler for Selected event.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Simplex.Gui.Control.CollapsibleCategory.Add(System.String)">
            <summary>
            Adds a new entry.
            </summary>
            <param name="name">Entry name (displayed).</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.CollapsibleCategory.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.CollapsibleCategory.UnselectAll">
            <summary>
            Unselects all entries.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Control.CollapsibleList">
            <summary>
            CollapsibleList control. Groups CollapsibleCategory controls.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.CollapsibleList.ItemSelected">
            <summary>
            Invoked when an entry has been selected.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.CollapsibleList.CategoryCollapsed">
            <summary>
            Invoked when a category collapsed state has been changed (header button has been pressed).
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.CollapsibleList.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.CollapsibleList"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.CollapsibleList.GetSelectedButton">
            <summary>
            Selected entry.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.CollapsibleList.Add(Simplex.Gui.Control.CollapsibleCategory)">
            <summary>
            Adds a category to the list.
            </summary>
            <param name="category">Category control to add.</param>
        </member>
        <member name="M:Simplex.Gui.Control.CollapsibleList.Add(System.String,System.String,System.Object)">
            <summary>
            Adds a new category to the list.
            </summary>
            <param name="categoryName">Name of the category.</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.CollapsibleList.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.CollapsibleList.UnselectAll">
            <summary>
            Unselects all entries.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.CollapsibleList.OnCategorySelected(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Handler for ItemSelected event.
            </summary>
            <param name="control">Event source: <see cref="T:Simplex.Gui.Control.CollapsibleList"/>.</param>
        </member>
        <member name="M:Simplex.Gui.Control.CollapsibleList.OnCategoryCollapsed(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Handler for category collapsed event.
            </summary>
            <param name="control">Event source: <see cref="T:Simplex.Gui.Control.CollapsibleCategory"/>.</param>
        </member>
        <member name="T:Simplex.Gui.Control.ColorLerpBox">
            <summary>
            Linear-interpolated HSV color box.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.ColorLerpBox.ColorChanged">
            <summary>
            Invoked when the selected color has been changed.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ColorLerpBox.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.ColorLerpBox"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ColorLerpBox.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ColorLerpBox.Lerp(Simplex.Gui.Color,Simplex.Gui.Color,System.Single)">
            <summary>
            Linear color interpolation.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ColorLerpBox.SelectedColor">
            <summary>
            Selected color.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ColorLerpBox.SetColor(Simplex.Gui.Color,System.Boolean,System.Boolean)">
            <summary>
            Sets the selected color.
            </summary>
            <param name="value">Value to set.</param>
            <param name="onlyHue">Deetrmines whether to only set H value (not SV).</param>
        </member>
        <member name="M:Simplex.Gui.Control.ColorLerpBox.OnMouseMoved(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse moved event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="dx">X change.</param>
            <param name="dy">Y change.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ColorLerpBox.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ColorLerpBox.GetColorAt(System.Int32,System.Int32)">
            <summary>
            Gets the color from specified coordinates.
            </summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <returns>Color value.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.ColorLerpBox.InvalidateTexture">
            <summary>
            Invalidates the control.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ColorLerpBox.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Simplex.Gui.Control.ColorPicker">
            <summary>
            RGBA color picker.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ColorPicker.SelectedColor">
            <summary>
            Selected color.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ColorPicker.R">
            <summary>
            Red value of the selected color.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ColorPicker.G">
            <summary>
            Green value of the selected color.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ColorPicker.B">
            <summary>
            Blue value of the selected color.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ColorPicker.A">
            <summary>
            Alpha value of the selected color.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.ColorPicker.ColorChanged">
            <summary>
            Invoked when the selected color has been changed.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ColorPicker.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.ColorPicker"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="P:Simplex.Gui.Control.ColorPicker.AlphaVisible">
            <summary>
            Determines whether the Alpha control is visible.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Control.ColorSlider">
            <summary>
            HSV hue selector.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.ColorSlider.ColorChanged">
            <summary>
            Invoked when the selected color has been changed.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ColorSlider.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.ColorSlider"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ColorSlider.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ColorSlider.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ColorSlider.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ColorSlider.OnMouseMoved(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse moved event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="dx">X change.</param>
            <param name="dy">Y change.</param>
        </member>
        <member name="P:Simplex.Gui.Control.ColorSlider.SelectedColor">
            <summary>
            Selected color.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Control.ComboBox">
            <summary>
            ComboBox control.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ComboBox.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.ComboBox"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ComboBox.OnClicked(Simplex.Gui.Control.ControlBase,Simplex.Gui.Control.ClickedEventArgs)">
            <summary>
            Internal Pressed implementation.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ComboBox.RemoveAll">
            <summary>
            Removes all items.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ComboBox.OnItemSelected(Simplex.Gui.Control.ControlBase,Simplex.Gui.Control.ItemSelectedEventArgs)">
            <summary>
            Internal handler for item selected event.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ComboBox.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ComboBox.RenderFocus(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the focus overlay.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Simplex.Gui.Control.ControlBase">
            <summary>
            Base control class.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Control.ControlBase.GuiEventHandler`1">
            <summary>
            Delegate used for all control event handlers.
            </summary>
            <param name="sender">Event source.</param>
            <param name="arguments" >Additional arguments. May be empty (EventArgs.Empty).</param>
        </member>
        <member name="F:Simplex.Gui.Control.ControlBase.m_ActualParent">
            <summary>
            This is the panel's actual parent - most likely the logical 
            parent's InnerPanel (if it has one). You should rarely need this.
            </summary>
        </member>
        <member name="F:Simplex.Gui.Control.ControlBase.m_Children">
            <summary>
            Real list of children.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.ControlBase.HoverEnter">
            <summary>
            Invoked when mouse pointer enters the control.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.ControlBase.HoverLeave">
            <summary>
            Invoked when mouse pointer leaves the control.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.ControlBase.BoundsChanged">
            <summary>
            Invoked when control's bounds have been changed.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.ControlBase.Clicked">
            <summary>
            Invoked when the control has been left-clicked.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.ControlBase.DoubleClicked">
            <summary>
            Invoked when the control has been double-left-clicked.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.ControlBase.RightClicked">
            <summary>
            Invoked when the control has been right-clicked.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.ControlBase.DoubleRightClicked">
            <summary>
            Invoked when the control has been double-right-clicked.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.ClickEventAssigned">
            <summary>
            Returns true if any on click events are set.
            </summary>
        </member>
        <member name="F:Simplex.Gui.Control.ControlBase.m_Accelerators">
            <summary>
            Accelerator map.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.Children">
            <summary>
            Logical list of children.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.Parent">
            <summary>
            The logical parent. It's usually what you expect, the control you've parented it to.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.Dock">
            <summary>
            Dock position.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.NeedsLayout">
            <summary>
            Is layout needed.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.LayoutDone">
            <summary>
            Is layout done at least once for the control.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.Skin">
            <summary>
            Current skin.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.ToolTip">
            <summary>
            Current tooltip.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.ToolTipText">
            <summary>
            Label typed tool tip text.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.IsMenuComponent">
            <summary>
            Indicates whether this control is a menu component.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.ShouldClip">
            <summary>
            Determines whether the control should be clipped to its bounds while rendering.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.MeasuredSize">
            <summary>
            Minimum size that the control needs to draw itself correctly. Valid after DoMeasure call. This includes margins.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.Padding">
            <summary>
            Current padding - inner spacing. Padding is not valid for all controls.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.Margin">
            <summary>
            Current margin - outer spacing.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.VerticalAlignment">
            <summary>
            Vertical alignment of the control if the control is smaller than the available space.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.HorizontalAlignment">
            <summary>
            Horizontal alignment of the control if the control is smaller than the available space.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.IsOnTop">
            <summary>
            Indicates whether the control is on top of its parent's children.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.Component">
            <summary>
            Component if this control is the base of the user defined control group.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.UserData">
            <summary>
            User data associated with the control.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.IsHovered">
            <summary>
            Indicates whether the control is hovered by mouse pointer.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.HasFocus">
            <summary>
            Indicates whether the control has focus.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.IsDisabled">
            <summary>
            Indicates whether the control is disabled.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.IsHidden">
            <summary>
            Indicates whether the control is hidden.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.IsCollapsed">
            <summary>
            Indicates whether the control is hidden.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.RestrictToParent">
            <summary>
            Determines whether the control's position should be restricted to parent's bounds.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.MouseInputEnabled">
            <summary>
            Determines whether the control receives mouse input events.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.KeyboardInputEnabled">
            <summary>
            Determines whether the control receives keyboard input events.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.KeyboardNeeded">
            <summary>
            Determines whether the control receives keyboard character events.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.Cursor">
            <summary>
            Gets or sets the mouse cursor when the cursor is hovering the control.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.IsTabable">
            <summary>
            Indicates whether the control is tabable (can be focused by pressing Tab).
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.ShouldDrawBackground">
            <summary>
            Indicates whether control's background should be drawn during rendering.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.ShouldCacheToTexture">
            <summary>
            Indicates whether the renderer should cache drawing to a texture to improve performance (at the cost of memory).
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.Name">
            <summary>
            Gets or sets the control's internal name.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.Bounds">
            <summary>
            Control's size and position relative to the parent.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.RenderBounds">
            <summary>
            Bounds for the renderer.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.InnerBounds">
            <summary>
            Bounds adjusted by padding.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.MinimumSize">
            <summary>
            Size restriction.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.MaximumSize">
            <summary>
            Size restriction.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.ShouldDrawHover">
            <summary>
            Determines whether hover should be drawn during rendering.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.IsVisible">
            <summary>
            Indicates whether the control and its parents are visible.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.ActualLeft">
            <summary>
            Location of the control. Valid after DoArrange call.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.ActualTop">
            <summary>
            Location of the control. Valid after DoArrange call.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.ActualWidth">
            <summary>
            Width of the control. Valid after DoArrange call.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.ActualHeight">
            <summary>
            Height of the control. Valid after DoArrange call.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.ActualPosition">
            <summary>
            Location of the control. Valid after DoArrange call.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.ActualSize">
            <summary>
            Size of the control. Valid after DoArrange call.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.ActualRight">
            <summary>
            Location of the control. Valid after DoArrange call.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.ActualBottom">
            <summary>
            Location of the control. Valid after DoArrange call.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.Left">
            <summary>
            Desired location of the control. Used only on default layout (DockLayout) if Dock property is None.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.Top">
            <summary>
            Desired location of the control. Used only on default layout (DockLayout) if Dock property is None.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.Width">
            <summary>
            Desired size of the control. Set this value only if HorizontalAlignment is not Stretch. By default this value is ignored.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.Height">
            <summary>
            Desired size of the control. Set this value only if VerticalAlignment is not Stretch. By default this value is ignored.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.Position">
            <summary>
            Desired location of the control. Used only on default layout (DockLayout) if Dock property is None.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.Size">
            <summary>
            Desired size of the control. Set this only if both of alignments are not Stretch. By default this value is ignored.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.DesiredBounds">
            <summary>
            Desired location and size of the control. Set this only if both of alignments are not Stretch. Used only on default layout (DockLayout) if Dock property is None. By default size is ignored.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.AnchorBounds">
            <summary>
            Default location and size of the control insize the container. Used only on AnchorLayout.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.Anchor">
            <summary>
            How the control is moved and/or stretched if the container size changes. Used only on AnchorLayout.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.IsVirtualControl">
            <summary>
            Enable this if the parent of the control doesn't need to know if a new layout is needed.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ControlBase.DrawDebugOutlines">
            <summary>
            Determines whether margin, padding and bounds outlines for the control will be drawn. Applied recursively to all children.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.ControlBase"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.DelayedDelete">
            <summary>
            Detaches the control from canvas and adds to the deletion queue (processed in Canvas.DoThink).
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.GetCanvas">
            <summary>
            Gets the canvas (root parent) of the control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.Enable">
            <summary>
            Enables the control.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.Disable">
            <summary>
            Disables the control.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.DefaultAcceleratorHandler(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Default accelerator handler.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnAccelerator">
            <summary>
            Default accelerator handler.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.Hide">
            <summary>
            Hides the control. Hidden controls participate in the layout process. If you don't want to layout, use Collapse.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.Collapse(System.Boolean,System.Boolean)">
            <summary>
            Collapse or show the control. Collapsed controls don't participate in the layout process and are hidden.
            </summary>
            <param name="collapsed">Collapse or show.</param>
            <param name="measure">Is layout triggered.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.Show">
            <summary>
            Shows the control.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.SetToolTipText(System.String)">
            <summary>
            Creates a tooltip for the control.
            </summary>
            <param name="text">Tooltip text.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.Invalidate">
            <summary>
            Trigger the layout process.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.InvalidateParent">
            <summary>
            Trigger parent layout process. Use this instead of Invalidate() if you know that
            the parent is affected some way by the change.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.SendToBack">
            <summary>
            Sends the control to the bottom of paren't visibility stack.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.BringToFront">
            <summary>
            Brings the control to the top of paren't visibility stack.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.FindChildByName(System.String,System.Boolean)">
            <summary>
            Finds a child by name.
            </summary>
            <param name="name">Child name.</param>
            <param name="recursive">Determines whether the search should be recursive.</param>
            <returns>Found control or null.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.AddChild(Simplex.Gui.Control.ControlBase)">
            <summary>
            Attaches specified control as a child of this one.
            </summary>
            <param name="child">Control to be added as a child.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.RemoveChild(Simplex.Gui.Control.ControlBase,System.Boolean)">
            <summary>
            Detaches specified control from this one.
            </summary>
            <param name="child">Child to be removed.</param>
            <param name="dispose">Determines whether the child should be disposed (added to delayed delete queue).</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.DeleteAllChildren">
            <summary>
            Removes all children (and disposes them).
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnChildAdded(Simplex.Gui.Control.ControlBase)">
            <summary>
            Handler invoked when a child is added.
            </summary>
            <param name="child">Child added.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnChildRemoved(Simplex.Gui.Control.ControlBase)">
            <summary>
            Handler invoked when a child is removed.
            </summary>
            <param name="child">Child removed.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.MoveTo(System.Int32,System.Int32)">
            <summary>
            Moves the control to a specific point, clamping on paren't bounds if RestrictToParent is set.
            This function will override control location set by layout or user.
            </summary>
            <param name="x">Target x coordinate.</param>
            <param name="y">Target y coordinate.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.SetPosition(System.Single,System.Single)">
            <summary>
            Sets the control position.
            </summary>
            <param name="x">Target x coordinate.</param>
            <param name="y">Target y coordinate.</param>
            <remarks>Bounds are reset after the next layout pass.</remarks>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.SetPosition(System.Int32,System.Int32)">
            <summary>
            Sets the control position.
            </summary>
            <param name="x">Target x coordinate.</param>
            <param name="y">Target y coordinate.</param>
            <remarks>Bounds are reset after the next layout pass.</remarks>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.SetSize(System.Int32,System.Int32)">
            <summary>
            Sets the control size.
            </summary>
            <param name="width">New width.</param>
            <param name="height">New height.</param>
            <returns>True if bounds changed.</returns>
            <remarks>Bounds are reset after the next layout pass.</remarks>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.SetBounds(Simplex.Gui.Rectangle)">
            <summary>
            Sets the control bounds.
            </summary>
            <param name="bounds">New bounds.</param>
            <returns>True if bounds changed.</returns>
            <remarks>Bounds are reset after the next layout pass.</remarks>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the control bounds.
            </summary>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
            <returns>
            True if bounds changed.
            </returns>
            <remarks>Bounds are reset after the next layout pass.</remarks>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnBoundsChanged(Simplex.Gui.Rectangle)">
            <summary>
            Handler invoked when control's bounds change.
            </summary>
            <param name="oldBounds">Old bounds.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnScaleChanged">
            <summary>
            Handler invoked when control's scale changes.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.DoCacheRender(Simplex.Gui.Skin.SkinBase,Simplex.Gui.Control.ControlBase)">
            <summary>
            Renders the control to a cache using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
            <param name="master">Root parent.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.DoRender(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Rendering logic implementation.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.RenderRecursive(Simplex.Gui.Skin.SkinBase,Simplex.Gui.Rectangle)">
            <summary>
            Recursive rendering logic.
            </summary>
            <param name="skin">Skin to use.</param>
            <param name="clipRect">Clipping rectangle.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.SetSkin(Simplex.Gui.Skin.SkinBase,System.Boolean)">
            <summary>
            Sets the control's skin.
            </summary>
            <param name="skin">New skin.</param>
            <param name="doChildren">Deterines whether to change children skin.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnSkinChanged(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Handler invoked when control's skin changes.
            </summary>
            <param name="newSkin">New skin.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnMouseWheeled(System.Int32)">
            <summary>
            Handler invoked on mouse wheel event.
            </summary>
            <param name="delta">Scroll delta.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.InputMouseWheeled(System.Int32)">
            <summary>
            Invokes mouse wheeled event (used by input system).
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnMouseMoved(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse moved event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="dx">X change.</param>
            <param name="dy">Y change.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.InputMouseMoved(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Invokes mouse moved event (used by input system).
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.InputMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Invokes left mouse click event (used by input system).
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnMouseClickedRight(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (right) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.InputMouseClickedRight(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Invokes right mouse click event (used by input system).
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnMouseDoubleClickedLeft(System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse double click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.InputMouseDoubleClickedLeft(System.Int32,System.Int32)">
            <summary>
            Invokes left double mouse click event (used by input system).
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnMouseDoubleClickedRight(System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse double click (right) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.InputMouseDoubleClickedRight(System.Int32,System.Int32)">
            <summary>
            Invokes right double mouse click event (used by input system).
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnMouseEntered">
            <summary>
            Handler invoked on mouse cursor entering control's bounds.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.InputMouseEntered">
            <summary>
            Invokes mouse enter event (used by input system).
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnMouseLeft">
            <summary>
            Handler invoked on mouse cursor leaving control's bounds.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.InputMouseLeft">
            <summary>
            Invokes mouse leave event (used by input system).
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.Focus">
            <summary>
            Focuses the control.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.Blur">
            <summary>
            Unfocuses the control.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.Touch">
            <summary>
            Control has been clicked - invoked by input system. Windows use it to propagate activation.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.GetControlAt(System.Int32,System.Int32)">
            <summary>
            Gets a child by its coordinates.
            </summary>
            <param name="x">Child X.</param>
            <param name="y">Child Y.</param>
            <returns>Control or null if not found.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.Measure(Simplex.Gui.Size)">
            <summary>
            Override this method if you need to customize the layout process.
            </summary>
            <param name="availableSize">Available size for the control. The control doesn't need to use all the space that is available.</param>
            <returns>Minimum size that the control needs to draw itself correctly.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.DoMeasure(System.Int32,System.Int32)">
            <summary>
            Call this method for all child controls.
            </summary>
            <param name="availableWidth">Width that is available for the control.</param>
            <param name="availableHeight">Height that is available for the control.</param>
            <returns>Minimum size that the control needs to draw itself correctly.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.DoMeasure(Simplex.Gui.Size)">
            <summary>
            Call this method for all child controls.
            </summary>
            <param name="availableSize">Size that is available for the control.</param>
            <returns>Minimum size that the control needs to draw itself correctly.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.Arrange(Simplex.Gui.Size)">
            <summary>
            Override this method if you need to customize the layout process. Usually, if you override Measure, you also need to override Arrange.
            </summary>
            <param name="finalSize">Space that the control should fill.</param>
            <returns>Space that the control filled.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.DoArrange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Call this method for all child controls.
            </summary>
            <param name="x">Final horizontal location. This includes margins.</param>
            <param name="y">Final vertical location. This includes margins.</param>
            <param name="width">Final width of the control. This includes margins.</param>
            <param name="height">Final height of the control. This includes margins.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.DoArrange(Simplex.Gui.Rectangle)">
            <summary>
            Call this method for all child controls.
            </summary>
            <param name="finalRect">Final location and size of the control. This includes margins.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.DoLayout">
            <summary>
            Invoke the layout process for the control and it's children.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.RecurseControls">
            <summary>
            Recursively check tabs, focus etc.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.IsChild(Simplex.Gui.Control.ControlBase)">
            <summary>
            Checks if the given control is a child of this instance.
            </summary>
            <param name="child">Control to examine.</param>
            <returns>True if the control is our child.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.LocalPosToCanvas(Simplex.Gui.Point)">
            <summary>
            Converts local coordinates to canvas coordinates.
            </summary>
            <param name="pnt">Local coordinates.</param>
            <returns>Canvas coordinates.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.CanvasPosToLocal(Simplex.Gui.Point)">
            <summary>
            Converts canvas coordinates to local coordinates.
            </summary>
            <param name="pnt">Canvas coordinates.</param>
            <returns>Local coordinates.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.CloseMenus">
            <summary>
            Closes all menus recursively.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.UpdateRenderBounds">
            <summary>
            Copies Bounds to RenderBounds.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.UpdateCursor">
            <summary>
            Sets mouse cursor to current cursor.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.HandleAccelerator(System.String)">
            <summary>
            Handles keyboard accelerator.
            </summary>
            <param name="accelerator">Accelerator text.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.AddAccelerator(System.String,Simplex.Gui.Control.ControlBase.GuiEventHandler{System.EventArgs})">
            <summary>
            Adds keyboard accelerator.
            </summary>
            <param name="accelerator">Accelerator text.</param>
            <param name="handler">Handler.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.AddAccelerator(System.String)">
            <summary>
            Adds keyboard accelerator with a default handler.
            </summary>
            <param name="accelerator">Accelerator text.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.Redraw">
            <summary>
            Re-renders the control, invalidates cached texture.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.UpdateColors">
            <summary>
            Updates control colors.
            </summary>
            <remarks>
            Used in composite controls like lists to differentiate row colors etc.
            </remarks>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnKeyPressed(Simplex.Gui.Key,System.Boolean)">
            <summary>
            Handler for keyboard events.
            </summary>
            <param name="key">Key pressed.</param>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.InputKeyPressed(Simplex.Gui.Key,System.Boolean)">
            <summary>
            Invokes key press event (used by input system).
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnKeyReleaseed(Simplex.Gui.Key)">
            <summary>
            Handler for keyboard events.
            </summary>
            <param name="key">Key pressed.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnKeyTab(System.Boolean)">
            <summary>
            Handler for Tab keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnKeySpace(System.Boolean)">
            <summary>
            Handler for Space keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnKeyReturn(System.Boolean)">
            <summary>
            Handler for Return keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnKeyBackspace(System.Boolean)">
            <summary>
            Handler for Backspace keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnKeyDelete(System.Boolean)">
            <summary>
            Handler for Delete keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnKeyRight(System.Boolean)">
            <summary>
            Handler for Right Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnKeyLeft(System.Boolean)">
            <summary>
            Handler for Left Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnKeyHome(System.Boolean)">
            <summary>
            Handler for Home keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnKeyEnd(System.Boolean)">
            <summary>
            Handler for End keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnKeyUp(System.Boolean)">
            <summary>
            Handler for Up Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnKeyDown(System.Boolean)">
            <summary>
            Handler for Down Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnKeyEscape(System.Boolean)">
            <summary>
            Handler for Escape keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnPaste(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Handler for Paste event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnCopy(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Handler for Copy event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnCut(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Handler for Cut event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnSelectAll(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Handler for Select All event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.RenderFocus(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the focus overlay.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.RenderUnder(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders under the actual control (shadows etc).
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.RenderOver(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders over the actual control (overlays).
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.Think">
            <summary>
            Called during rendering.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnKeyboardFocus">
            <summary>
            Handler for gaining keyboard focus.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnLostKeyboardFocus">
            <summary>
            Handler for losing keyboard focus.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ControlBase.OnChar(System.Char)">
            <summary>
            Handler for character input event.
            </summary>
            <param name="chr">Character typed.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="T:Simplex.Gui.Control.CrossSplitter">
            <summary>
            Splitter control.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.CrossSplitter.PanelZoomed">
            <summary>
            Invoked when one of the panels has been zoomed (maximized).
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.CrossSplitter.PanelUnZoomed">
            <summary>
            Invoked when one of the panels has been unzoomed (restored).
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.CrossSplitter.ZoomChanged">
            <summary>
            Invoked when the zoomed panel has been changed.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.CrossSplitter.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.CrossSplitter"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.CrossSplitter.CenterPanels">
            <summary>
            Centers the panels so that they take even amount of space.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.CrossSplitter.IsZoomed">
            <summary>
            Indicates whether any of the panels is zoomed.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.CrossSplitter.SplittersVisible">
            <summary>
            Gets or sets a value indicating whether splitters should be visible.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.CrossSplitter.SplitterSize">
            <summary>
            Gets or sets the size of the splitter.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.CrossSplitter.SetPanel(System.Int32,Simplex.Gui.Control.ControlBase)">
            <summary>
            Assigns a control to the specific inner section.
            </summary>
            <param name="index">Section index (0-3).</param>
            <param name="panel">Control to assign.</param>
        </member>
        <member name="M:Simplex.Gui.Control.CrossSplitter.GetPanel(System.Int32)">
            <summary>
            Gets the specific inner section.
            </summary>
            <param name="index">Section index (0-3).</param>
            <returns>Specified section.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.CrossSplitter.OnZoomChanged">
            <summary>
            Internal handler for the zoom changed event.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.CrossSplitter.Zoom(System.Int32)">
            <summary>
            Maximizes the specified panel so it fills the entire control.
            </summary>
            <param name="section">Panel index (0-3).</param>
        </member>
        <member name="M:Simplex.Gui.Control.CrossSplitter.UnZoom">
            <summary>
            Restores the control so all panels are visible.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Control.DockBase">
            <summary>
            Base for dockable containers.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.DockBase.LeftDock">
            <summary>
            Control docked on the left side.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.DockBase.RightDock">
            <summary>
            Control docked on the right side.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.DockBase.TopDock">
            <summary>
            Control docked on the top side.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.DockBase.BottomDock">
            <summary>
            Control docked on the bottom side.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.DockBase.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.DockBase"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.DockBase.OnKeySpace(System.Boolean)">
            <summary>
            Handler for Space keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.DockBase.SetupChildDock(Simplex.Gui.Dock)">
            <summary>
            Initializes an inner docked control for the specified position.
            </summary>
            <param name="pos">Dock position.</param>
        </member>
        <member name="M:Simplex.Gui.Control.DockBase.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.DockBase.GetChildDock(Simplex.Gui.Dock)">
            <summary>
            Gets an inner docked control for the specified position.
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Simplex.Gui.Control.DockBase.GetDroppedTabDirection(System.Int32,System.Int32)">
            <summary>
            Calculates dock direction from dragdrop coordinates.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <returns>Dock direction.</returns>
        </member>
        <member name="P:Simplex.Gui.Control.DockBase.IsEmpty">
            <summary>
            Indicates whether the control contains any docked children.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.DockBase.RenderOver(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders over the actual control (overlays).
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Simplex.Gui.Control.DockedTabControl">
            <summary>
            Docked tab control.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.DockedTabControl.TitleBarVisible">
            <summary>
            Determines whether the title bar is visible.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.DockedTabControl.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.DockedTabControl"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="T:Simplex.Gui.Control.EditableComboBox">
            <summary>
            Editable ComboBox control.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.EditableComboBox.TextChanged">
            <summary>
            Invoked when the text has changed.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.EditableComboBox.SubmitPressed">
            <summary>
            Invoked when the submit key has been pressed.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.EditableComboBox.Text">
            <summary>
            Text.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.EditableComboBox.TextColor">
            <summary>
            Text color.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.EditableComboBox.Font">
            <summary>
            Font.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.EditableComboBox.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.EditableComboBox"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.EditableComboBox.OnClicked(Simplex.Gui.Control.ControlBase,Simplex.Gui.Control.ClickedEventArgs)">
            <summary>
            Internal Pressed implementation.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.EditableComboBox.OnItemSelected(Simplex.Gui.Control.ControlBase,Simplex.Gui.Control.ItemSelectedEventArgs)">
            <summary>
            Internal handler for item selected event.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Simplex.Gui.Control.EditableComboBox.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.EditableComboBox.RenderFocus(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the focus overlay.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Simplex.Gui.Control.GroupBox">
            <summary>
            Group box (container).
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.GroupBox.Text">
            <summary>
            Text.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.GroupBox.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.GroupBox"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.GroupBox.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Simplex.Gui.Control.HorizontalScrollBar">
            <summary>
            Horizontal scrollbar.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.HorizontalScrollBar.BarSize">
            <summary>
            Bar size (in pixels).
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.HorizontalScrollBar.BarPos">
            <summary>
            Bar position (in pixels).
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.HorizontalScrollBar.IsHorizontal">
            <summary>
            Indicates whether the bar is horizontal.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.HorizontalScrollBar.ButtonSize">
            <summary>
            Button size (in pixels).
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.HorizontalScrollBar.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.HorizontalScrollBar"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.HorizontalScrollBar.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Simplex.Gui.Control.HorizontalScrollBar.SetScrollAmount(System.Single,System.Boolean)">
            <summary>
            Sets the scroll amount (0-1).
            </summary>
            <param name="value">Scroll amount.</param>
            <param name="forceUpdate">Determines whether the control should be updated.</param>
            <returns>
            True if control state changed.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.HorizontalScrollBar.OnBarMoved(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Handler for the BarMoved event.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="T:Simplex.Gui.Control.HorizontalSlider">
            <summary>
            Horizontal slider.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.HorizontalSlider.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.HorizontalSlider"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.HorizontalSlider.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Simplex.Gui.Control.HorizontalSlider.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="P:Simplex.Gui.Control.HorizontalSplitter.Value">
            <summary>
            Splitter position (0 - 1)
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.HorizontalSplitter.IsZoomed">
            <summary>
            Indicates whether any of the panels is zoomed.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.HorizontalSplitter.SplittersVisible">
            <summary>
            Gets or sets a value indicating whether splitters should be visible.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.HorizontalSplitter.SplitterSize">
            <summary>
            Gets or sets the size of the splitter.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.HorizontalSplitter.PanelZoomed">
            <summary>
            Invoked when one of the panels has been zoomed (maximized).
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.HorizontalSplitter.PanelUnZoomed">
            <summary>
            Invoked when one of the panels has been unzoomed (restored).
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.HorizontalSplitter.ZoomChanged">
            <summary>
            Invoked when the zoomed panel has been changed.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.HorizontalSplitter.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.CrossSplitter"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.HorizontalSplitter.CenterPanels">
            <summary>
            Centers the panels so that they take even amount of space.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.HorizontalSplitter.SetPanel(System.Int32,Simplex.Gui.Control.ControlBase)">
            <summary>
            Assigns a control to the specific inner section.
            </summary>
            <param name="index">Section index (0-3).</param>
            <param name="panel">Control to assign.</param>
        </member>
        <member name="M:Simplex.Gui.Control.HorizontalSplitter.GetPanel(System.Int32)">
            <summary>
            Gets the specific inner section.
            </summary>
            <param name="index">Section index (0-3).</param>
            <returns>Specified section.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.HorizontalSplitter.OnZoomChanged">
            <summary>
            Internal handler for the zoom changed event.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.HorizontalSplitter.Zoom(System.Int32)">
            <summary>
            Maximizes the specified panel so it fills the entire control.
            </summary>
            <param name="section">Panel index (0-3).</param>
        </member>
        <member name="M:Simplex.Gui.Control.HorizontalSplitter.UnZoom">
            <summary>
            Restores the control so all panels are visible.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Control.HSVColorPicker">
            <summary>
            HSV color picker with "before" and "after" color boxes.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.HSVColorPicker.ColorChanged">
            <summary>
            Invoked when the selected color has changed.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.HSVColorPicker.DefaultColor">
            <summary>
            The "before" color.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.HSVColorPicker.SelectedColor">
            <summary>
            Selected color.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.HSVColorPicker.EnableDefaultColor">
            <summary>
            Show / hide default color box
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.HSVColorPicker.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.HSVColorPicker"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.HSVColorPicker.SetColor(Simplex.Gui.Color,System.Boolean,System.Boolean)">
            <summary>
            Sets the selected color.
            </summary>
            <param name="color">Color to set.</param>
            <param name="onlyHue">Determines whether only the hue should be set.</param>
            <param name="reset">Determines whether the "before" color should be set as well.</param>
        </member>
        <member name="T:Simplex.Gui.Control.ImagePanel">
            <summary>
            Image container.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ImagePanel.ImageName">
            <summary>
            Texture name.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ImagePanel.ImageSize">
            <summary>
            Gets or sets the size of the image.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ImagePanel.TextureRect">
            <summary>
            Gets or sets the texture coordinates of the image in pixels.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ImagePanel.ImageColor">
            <summary>
            Gets or sets the color of the image.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ImagePanel.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.ImagePanel"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ImagePanel.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ImagePanel.SetUV(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the texture coordinates of the image in uv-coordinates.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ImagePanel.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ImagePanel.Touch">
            <summary>
            Control has been clicked - invoked by input system. Windows use it to propagate activation.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ImagePanel.OnKeySpace(System.Boolean)">
            <summary>
            Handler for Space keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="E:Simplex.Gui.Control.Internal.ButtonBase.Pressed">
            <summary>
            Invoked when the button is pressed.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.Internal.ButtonBase.Released">
            <summary>
            Invoked when the button is released.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.Internal.ButtonBase.Toggled">
            <summary>
            Invoked when the button's toggle state has changed.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.Internal.ButtonBase.ToggledOn">
            <summary>
            Invoked when the button's toggle state has changed to On.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.Internal.ButtonBase.ToggledOff">
            <summary>
            Invoked when the button's toggle state has changed to Off.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.ButtonBase.IsDepressed">
            <summary>
            Indicates whether the button is depressed.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.ButtonBase.IsToggle">
            <summary>
            Indicates whether the button is toggleable.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.ButtonBase.ToggleState">
            <summary>
            Determines the button's toggle state.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ButtonBase.Toggle">
            <summary>
            Toggles the button.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ButtonBase.Press(Simplex.Gui.Control.ControlBase)">
            <summary>
            "Clicks" the button.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ButtonBase.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ButtonBase.OnClicked(System.Int32,System.Int32)">
            <summary>
            Internal OnPressed implementation.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ButtonBase.OnAccelerator">
            <summary>
            Default accelerator handler.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ButtonBase.OnMouseDoubleClickedLeft(System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse double click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="T:Simplex.Gui.Control.Internal.CategoryButton">
            <summary>
            Item in CollapsibleCategory.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.CategoryButton.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Internal.CategoryButton"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.CategoryButton.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.CategoryButton.UpdateColors">
            <summary>
            Updates control colors.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Control.Internal.CategoryHeaderButton">
            <summary>
            Header of CollapsibleCategory.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.CategoryHeaderButton.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Internal.CategoryHeaderButton"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.CategoryHeaderButton.UpdateColors">
            <summary>
            Updates control colors.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Control.Internal.CloseButton">
            <summary>
            Window close button.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.CloseButton.#ctor(Simplex.Gui.Control.ControlBase,Simplex.Gui.Control.Window)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Internal.CloseButton"/> class.
            </summary>
            <param name="parent">Parent control.</param>
            <param name="owner">Window that owns this button.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.CloseButton.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Simplex.Gui.Control.Internal.ColorButton">
            <summary>
            Property button.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.ColorButton.Color">
            <summary>
            Current color value.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ColorButton.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Internal.ColorButton"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ColorButton.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Simplex.Gui.Control.Internal.ColorDisplay">
            <summary>
            Color square.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ColorDisplay.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Internal.ColorDisplay"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ColorDisplay.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.ColorDisplay.Color">
            <summary>
            Current color.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.Internal.ComboBoxBase.ItemSelected">
            <summary>
            Invoked when the selected item has changed.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.ComboBoxBase.SelectedIndex">
            <summary>
            Index of the selected radio button.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.ComboBoxBase.SelectedItem">
            <summary>
            Selected item.
            </summary>
            <remarks>Not just String property, because items also have internal names.</remarks>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.ComboBoxBase.IsOpen">
            <summary>
            Indicates whether the combo menu is open.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ComboBoxBase.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Internal.ComboBoxBase"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ComboBoxBase.AddItem(System.String,System.String,System.Object)">
            <summary>
            Adds a new item.
            </summary>
            <param name="label">Item label (displayed).</param>
            <param name="name">Item name.</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ComboBoxBase.AddItem(Simplex.Gui.Control.MenuItem)">
            <summary>
            Adds an item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ComboBoxBase.RemoveAll">
            <summary>
            Removes all items.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ComboBoxBase.OnItemSelected(Simplex.Gui.Control.ControlBase,Simplex.Gui.Control.ItemSelectedEventArgs)">
            <summary>
            Internal handler for item selected event.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ComboBoxBase.Open">
            <summary>
            Opens the combo.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ComboBoxBase.Close">
            <summary>
            Closes the combo.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ComboBoxBase.OnKeyDown(System.Boolean)">
            <summary>
            Handler for Down Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ComboBoxBase.OnKeyUp(System.Boolean)">
            <summary>
            Handler for Up Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ComboBoxBase.SetSelection(System.Int32)">
            <summary>
            Selects the specified option.
            </summary>
            <param name="index">Option to select.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ComboBoxBase.SelectByText(System.String)">
            <summary>
            Selects the first menu item with the given text it finds. 
            If a menu item can not be found that matches input, nothing happens.
            </summary>
            <param name="text">The label to look for, this is what is shown to the user.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ComboBoxBase.SelectByName(System.String)">
            <summary>
            Selects the first menu item with the given internal name it finds.
            If a menu item can not be found that matches input, nothing happens.
            </summary>
            <param name="name">The internal name to look for. To select by what is displayed to the user, use "SelectByText".</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ComboBoxBase.SelectByUserData(System.Object)">
            <summary>
            Selects the first menu item with the given user data it finds.
            If a menu item can not be found that matches input, nothing happens.
            </summary>
            <param name="userdata">The UserData to look for. The equivalency check uses "param.Equals(item.UserData)".
            If null is passed in, it will look for null/unset UserData.</param>
        </member>
        <member name="T:Simplex.Gui.Control.Internal.ComboBoxButton">
            <summary>
            Editable combobox button.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ComboBoxButton.#ctor(Simplex.Gui.Control.ControlBase,Simplex.Gui.Control.EditableComboBox)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Internal.ComboBoxButton"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ComboBoxButton.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="F:Simplex.Gui.Control.Internal.ContentControl.m_InnerPanel">
            <summary>
            If the innerpanel exists our children will automatically become children of that instead of us.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.ContentControl.Children">
            <summary>
            Logical list of children. If InnerPanel is not null, returns InnerPanel's children.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.ContentControl.Content">
            <summary>
            Get the content of the control.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ContentControl.AddChild(Simplex.Gui.Control.ControlBase)">
            <summary>
            Attaches specified control as a child of this one.
            </summary>
            <remarks>
            If InnerPanel is not null, it will become the parent.
            </remarks>
            <param name="child">Control to be added as a child.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ContentControl.RemoveChild(Simplex.Gui.Control.ControlBase,System.Boolean)">
            <summary>
            Detaches specified control from this one.
            </summary>
            <param name="child">Child to be removed.</param>
            <param name="dispose">Determines whether the child should be disposed (added to delayed delete queue).</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ContentControl.FindChildByName(System.String,System.Boolean)">
            <summary>
            Finds a child by name.
            </summary>
            <param name="name">Child name.</param>
            <param name="recursive">Determines whether the search should be recursive.</param>
            <returns>Found control or null.</returns>
        </member>
        <member name="T:Simplex.Gui.Control.Internal.DownArrow">
            <summary>
            ComboBox arrow.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.DownArrow.#ctor(Simplex.Gui.Control.ComboBox)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Internal.DownArrow"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.DownArrow.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Simplex.Gui.Control.Internal.Dragger">
            <summary>
            Base for controls that can be dragged by mouse.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.Dragger.IsHeld">
            <summary>
            Indicates if the control is being dragged.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.Internal.Dragger.Dragged">
            <summary>
            Event invoked when the control position has been changed.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.Dragger.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Internal.Dragger"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.Dragger.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.Dragger.OnMouseMoved(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse moved event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="dx">X change.</param>
            <param name="dy">Y change.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.Dragger.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Simplex.Gui.Control.Internal.Highlight">
            <summary>
            Drag and drop highlight.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.Highlight.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Internal.Highlight"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.Highlight.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Simplex.Gui.Control.Internal.MenuDivider">
            <summary>
            Divider menu item.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.MenuDivider.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Internal.MenuDivider"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.MenuDivider.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Simplex.Gui.Control.Internal.Modal">
            <summary>
            Modal control for windows.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.Modal.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Internal.Modal"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.Modal.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Simplex.Gui.Control.Internal.MultilineText">
            <summary>
            Multi line text.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.MultilineText.Item(System.Int32)">
            <summary>
            Get or set text line.
            </summary>
            <param name="index">Line index.</param>
            <returns>Text.</returns>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.MultilineText.TotalLines">
            <summary>
            Returns the number of lines that are in the Multiline Text Box.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.MultilineText.LineHeight">
            <summary>
            Height of the text line in pixels.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.MultilineText.Text">
            <summary>
            Gets and sets the text to display to the user. Each line is seperated by
            an Environment.NetLine character.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.MultilineText.Font">
            <summary>
            Font.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.MultilineText.SetText(System.String)">
            <summary>
            Sets the text.
            </summary>
            <param name="text">Text to set.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.MultilineText.InsertText(System.String,Simplex.Gui.Point)">
            <summary>
            Inserts text at a position.
            </summary>
            <param name="text">Text to insert.</param>
            <param name="position">Position where to insert.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.MultilineText.AddLine(System.String)">
            <summary>
            Add line to the end.
            </summary>
            <param name="text">Text to add.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.MultilineText.InsertLine(System.Int32,System.String)">
            <summary>
            Insert a new line.
            </summary>
            <param name="index">Index where to insert.</param>
            <param name="text">Text to insert.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.MultilineText.ReplaceLine(System.Int32,System.String)">
            <summary>
            Replace text line.
            </summary>
            <param name="index">Index what to replace.</param>
            <param name="text">New text.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.MultilineText.RemoveLine(System.Int32)">
            <summary>
            Remove the line at the index.
            </summary>
            <param name="index">Index to remove.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.MultilineText.Clear">
            <summary>
            Remove all text.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.MultilineText.GetCharacterPosition(Simplex.Gui.Point)">
            <summary>
            Gets the coordinates of specified character position in the text.
            </summary>
            <param name="position">Character position.</param>
            <returns>Character position in local coordinates.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.MultilineText.GetClosestCharacter(Simplex.Gui.Point)">
            <summary>
            Returns position of the character closest to specified point.
            </summary>
            <param name="p">Point in local coordinates.</param>
            <returns>Character position.</returns>
        </member>
        <member name="T:Simplex.Gui.Control.Internal.PropertyRowLabel">
            <summary>
            Label for PropertyRow.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.PropertyRowLabel.#ctor(Simplex.Gui.Control.PropertyRow)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Internal.PropertyRowLabel"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.PropertyRowLabel.UpdateColors">
            <summary>
            Updates control colors.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Control.Internal.PropertyTreeNode">
            <summary>
            Properties node.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.PropertyTreeNode.Text">
            <summary>
            Node's label.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.PropertyTreeNode.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Internal.PropertyTreeNode"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.PropertyTreeNode.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.PropertyTreeNode.Open">
            <summary>
            Opens the node.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.PropertyTreeNode.Close">
            <summary>
            Closes the node.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.PropertyTreeNode.Expand">
            <summary>
            Opens the node and all child nodes.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.PropertyTreeNode.OnToggleButtonPress(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Handler for the toggle button.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.PropertyTreeNode.OnDoubleClickName(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Handler for label double click.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="T:Simplex.Gui.Control.Internal.Resizer">
            <summary>
            Grab point for resizing.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.Internal.Resizer.Resized">
            <summary>
            Invoked when the control has been resized.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.Resizer.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Internal.Resizer"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.Resizer.OnMouseMoved(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse moved event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="dx">X change.</param>
            <param name="dy">Y change.</param>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.Resizer.ResizeDir">
            <summary>
            Gets or sets the sizing direction.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Control.Internal.RightArrow">
            <summary>
            Submenu indicator.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.RightArrow.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Internal.RightArrow"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.RightArrow.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Simplex.Gui.Control.Internal.ScrollBar">
            <summary>
            Base class for scrollbars.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.Internal.ScrollBar.BarMoved">
            <summary>
            Invoked when the bar is moved.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.ScrollBar.BarSize">
            <summary>
            Bar size (in pixels).
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.ScrollBar.BarPos">
            <summary>
            Bar position (in pixels).
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.ScrollBar.ButtonSize">
            <summary>
            Button size (in pixels).
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.ScrollBar.IsHorizontal">
            <summary>
            Indicates whether the bar is horizontal.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ScrollBar.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Internal.ScrollBar"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ScrollBar.SetScrollAmount(System.Single,System.Boolean)">
            <summary>
            Sets the scroll amount (0-1).
            </summary>
            <param name="value">Scroll amount.</param>
            <param name="forceUpdate">Determines whether the control should be updated.</param>
            <returns>True if control state changed.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ScrollBar.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ScrollBar.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ScrollBar.OnBarMoved(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Handler for the BarMoved event.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="T:Simplex.Gui.Control.Internal.ScrollBarBar">
            <summary>
            Scrollbar bar.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.ScrollBarBar.IsHorizontal">
            <summary>
            Indicates whether the bar is horizontal.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.ScrollBarBar.IsVertical">
            <summary>
            Indicates whether the bar is vertical.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ScrollBarBar.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Internal.ScrollBarBar"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ScrollBarBar.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ScrollBarBar.OnMouseMoved(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse moved event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="dx">X change.</param>
            <param name="dy">Y change.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ScrollBarBar.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="T:Simplex.Gui.Control.Internal.ScrollBarButton">
            <summary>
            Scrollbar button.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ScrollBarButton.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Internal.ScrollBarButton"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.ScrollBarButton.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Simplex.Gui.Control.Internal.Slider">
            <summary>
            Base slider.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.Slider.NotchCount">
            <summary>
            Number of notches on the slider axis.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.Slider.SnapToNotches">
            <summary>
            Determines whether the slider should snap to notches.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.Slider.Min">
            <summary>
            Minimum value.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.Slider.Max">
            <summary>
            Maximum value.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.Slider.Value">
            <summary>
            Current value.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.Internal.Slider.ValueChanged">
            <summary>
            Invoked when the value has been changed.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.Slider.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Internal.Slider"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.Slider.OnKeyRight(System.Boolean)">
            <summary>
            Handler for Right Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.Slider.OnKeyUp(System.Boolean)">
            <summary>
            Handler for Up Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.Slider.OnKeyLeft(System.Boolean)">
            <summary>
            Handler for Left Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.Slider.OnKeyDown(System.Boolean)">
            <summary>
            Handler for Down Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.Slider.OnKeyHome(System.Boolean)">
            <summary>
            Handler for Home keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.Slider.OnKeyEnd(System.Boolean)">
            <summary>
            Handler for End keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.Slider.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.Slider.SetRange(System.Single,System.Single)">
            <summary>
            Sets the value range.
            </summary>
            <param name="min">Minimum value.</param>
            <param name="max">Maximum value.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.Slider.RenderFocus(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the focus overlay.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Simplex.Gui.Control.Internal.SliderBar">
            <summary>
            Slider bar.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.SliderBar.IsHorizontal">
            <summary>
            Indicates whether the bar is horizontal.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.SliderBar.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Internal.SliderBar"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.SliderBar.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Simplex.Gui.Control.Internal.SplitterBar">
            <summary>
            Splitter bar.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.SplitterBar.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Internal.SplitterBar"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.SplitterBar.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Simplex.Gui.Control.Internal.TabButton">
            <summary>
            Tab header.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.TabButton.IsActive">
            <summary>
            Indicates whether the tab is active.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.TabButton.Page">
            <summary>
            Interior of the tab.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.TabButton.ShouldClip">
            <summary>
            Determines whether the control should be clipped to its bounds while rendering.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.TabButton.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Internal.TabButton"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.TabButton.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.TabButton.OnKeyDown(System.Boolean)">
            <summary>
            Handler for Down Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.TabButton.OnKeyUp(System.Boolean)">
            <summary>
            Handler for Up Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.TabButton.OnKeyRight(System.Boolean)">
            <summary>
            Handler for Right Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.TabButton.OnKeyLeft(System.Boolean)">
            <summary>
            Handler for Left Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.TabButton.UpdateColors">
            <summary>
            Updates control colors.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Control.Internal.TabControlInner">
            <summary>
            Inner panel of tab control.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.TabControlInner.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Internal.TabControlInner"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.TabControlInner.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Simplex.Gui.Control.Internal.TabStrip">
            <summary>
            Tab strip - groups TabButtons and allows reordering.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.TabStrip.AllowReorder">
            <summary>
            Determines whether it is possible to reorder tabs by mouse dragging.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.TabStrip.ShouldClip">
            <summary>
            Determines whether the control should be clipped to its bounds while rendering.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.TabStrip.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Internal.TabStrip"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.TabStrip.StripPosition">
            <summary>
            Strip position (top/left/right/bottom).
            </summary>
        </member>
        <member name="T:Simplex.Gui.Control.Internal.TabTitleBar">
            <summary>
            Titlebar for DockedTabControl.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.TabTitleBar.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Simplex.Gui.Control.Internal.Text">
            <summary>
            Displays text. Always sized to contents.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.Text.Font">
            <summary>
            Font used to display the text.
            </summary>
            <remarks>
            The font is not being disposed by this class.
            </remarks>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.Text.String">
            <summary>
            Text to display.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.Text.TextColor">
            <summary>
            Text color.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.Text.AutoSizeToContents">
            <summary>
            Determines whether the control should be automatically resized to fit the text.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.Text.Length">
            <summary>
            Text length in characters.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.Text.TextColorOverride">
            <summary>
            Text color override - used by tooltips.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.Text.TextOverride">
            <summary>
            Text override - used to display different string.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.Text.FitToText">
            <summary>
            Set the minimum size of the control to be able to show the text of this property.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.Text.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Internal.Text"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.Text.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.Text.GetCharacterPosition(System.Int32)">
            <summary>
            Gets the coordinates of specified character in the text.
            </summary>
            <param name="index">Character index.</param>
            <returns>Character position in local coordinates.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.Text.GetClosestCharacter(Simplex.Gui.Point)">
            <summary>
            Searches for a character closest to given point.
            </summary>
            <param name="p">Point.</param>
            <returns>Character index.</returns>
        </member>
        <member name="T:Simplex.Gui.Control.Internal.TreeNodeLabel">
            <summary>
            Tree node label.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.TreeNodeLabel.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Internal.TreeNodeLabel"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.TreeNodeLabel.UpdateColors">
            <summary>
            Updates control colors.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Control.Internal.TreeToggleButton">
            <summary>
            Tree node toggle button (the little plus sign).
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.TreeToggleButton.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Internal.TreeToggleButton"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.TreeToggleButton.RenderFocus(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the focus overlay.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.TreeToggleButton.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Simplex.Gui.Control.Internal.UpDownButton_Down">
            <summary>
            Numeric down arrow.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.UpDownButton_Down.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Internal.UpDownButton_Down"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.UpDownButton_Down.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Simplex.Gui.Control.Internal.UpDownButton_Up">
            <summary>
            Numeric up arrow.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.UpDownButton_Up.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Internal.UpDownButton_Up"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.UpDownButton_Up.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.WindowBase.IsDraggingEnabled">
            <summary>
            Is window draggable.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.WindowBase.DeleteOnClose">
            <summary>
            Determines whether the control should be disposed on close.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.WindowBase.StartPosition">
            <summary>
            Starting position of the window.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Internal.WindowBase.IsOnTop">
            <summary>
            Indicates whether the control is on top of its parent's children.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Internal.WindowBase.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Internal.WindowBase"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="T:Simplex.Gui.Control.Label">
            <summary>
            Static text label.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Label.Alignment">
            <summary>
            Text alignment.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Label.Text">
            <summary>
            Text.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Label.Font">
            <summary>
            Font.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Label.TextColor">
            <summary>
            Text color.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Label.TextColorOverride">
            <summary>
            Override text color (used by tooltips).
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Label.TextOverride">
            <summary>
            Text override - used to display different string.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Label.AutoSizeToContents">
            <summary>
            Determines if the control should autosize to its text.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Label.TextPadding">
            <summary>
            Text padding.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Label.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Label"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Label.GetClosestCharacter(System.Int32,System.Int32)">
            <summary>
            Returns index of the character closest to specified point (in canvas coordinates).
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Simplex.Gui.Control.Label.OnTextChanged">
            <summary>
            Handler for text changed event.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Label.GetCharacterPosition(System.Int32)">
            <summary>
            Gets the coordinates of specified character.
            </summary>
            <param name="index">Character index.</param>
            <returns>Character coordinates (local).</returns>
        </member>
        <member name="M:Simplex.Gui.Control.Label.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Simplex.Gui.Control.LabeledCheckBox">
            <summary>
            CheckBox with label.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.LabeledCheckBox.Checked">
            <summary>
            Invoked when the control has been checked.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.LabeledCheckBox.UnChecked">
            <summary>
            Invoked when the control has been unchecked.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.LabeledCheckBox.CheckChanged">
            <summary>
            Invoked when the control's check has been changed.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.LabeledCheckBox.IsChecked">
            <summary>
            Indicates whether the control is checked.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.LabeledCheckBox.Text">
            <summary>
            Label text.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.LabeledCheckBox.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.LabeledCheckBox"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.LabeledCheckBox.OnCheckChanged(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Handler for CheckChanged event.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.LabeledCheckBox.OnKeySpace(System.Boolean)">
            <summary>
            Handler for Space keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="T:Simplex.Gui.Control.LabeledRadioButton">
            <summary>
            RadioButton with label.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.LabeledRadioButton.Text">
            <summary>
            Label text.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.LabeledRadioButton.Checked">
            <summary>
            Invoked when the radiobutton has been checked.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.LabeledRadioButton.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.LabeledRadioButton"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.LabeledRadioButton.RenderFocus(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the focus overlay.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.LabeledRadioButton.OnKeySpace(System.Boolean)">
            <summary>
            Handler for Space keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.LabeledRadioButton.Select">
            <summary>
            Selects the radio button.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Control.Layout.AnchorLayout">
            <summary>
            Arrange child controls by anchoring them proportionally into the edges of this control.
            </summary>
            <remarks>
            You can control the anchoring process by setting Anchor and AnchorBounds
            properties of the child control. You must set an AnchorBounds property of this control to
            inform the layout process the default size of the area.
            </remarks>
        </member>
        <member name="M:Simplex.Gui.Control.Layout.AnchorLayout.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Layout.AnchorLayout"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="T:Simplex.Gui.Control.Layout.DockLayout">
            <summary>
            Dock child controls into the edges of this control. This is controlled by
            the Dock property of the child control.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Layout.DockLayout.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Layout.DockLayout"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="T:Simplex.Gui.Control.Layout.FlowLayout">
            <summary>
            FlowLayout is a layout like <see cref="T:Simplex.Gui.Control.Layout.GridLayout"/> with auto sized columns
            but you don't need to know exact number of columns.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Layout.FlowLayout.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Layout.FlowLayout"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="T:Simplex.Gui.Control.Layout.GridCellSizes">
            <summary>
            GridLayout column widths or row heights.
            </summary>
            <remarks>
            Cell size can be one of
            a) Single.NaN: Auto sized. Size is the smallest size the control can be drawn.
            b) 0.0 - 1.0: Remaining space filled proportionally.
            c) More than 1.0: Absolute cell size.
            </remarks>
        </member>
        <member name="T:Simplex.Gui.Control.Layout.GridLayout">
            <summary>
            Arrange child controls into columns and rows by adding them in column and row order.
            Add every column of the first row, then every column of the second row etc.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Layout.GridLayout.ColumnCount">
            <summary>
            Number of columns. This can be used when all cells are auto size.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Layout.GridLayout.ColumnWidths">
            <summary>
            Column widths. <see cref="T:Simplex.Gui.Control.Layout.GridCellSizes"/>
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Layout.GridLayout.RowHeights">
            <summary>
            Row heights. <see cref="T:Simplex.Gui.Control.Layout.GridCellSizes"/>
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Layout.GridLayout.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Layout.GridLayout"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Layout.GridLayout.SetColumnWidths(System.Single[])">
            <summary>
            Set column widths. <see cref="T:Simplex.Gui.Control.Layout.GridCellSizes"/>
            </summary>
            <param name="widths">Array of widths.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Layout.GridLayout.SetRowHeights(System.Single[])">
            <summary>
            Set row heights. <see cref="T:Simplex.Gui.Control.Layout.GridCellSizes"/>
            </summary>
            <param name="heights">Array of heights.</param>
        </member>
        <member name="T:Simplex.Gui.Control.Layout.HorizontalLayout">
            <summary>
            Arrange child controls into a row.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Layout.HorizontalLayout.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Layout.HorizontalLayout"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="T:Simplex.Gui.Control.Layout.Splitter">
            <summary>
            Base splitter class.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Layout.Splitter.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Layout.Splitter"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Layout.Splitter.SetPanel(System.Int32,Simplex.Gui.Control.ControlBase,System.Boolean)">
            <summary>
            Sets the contents of a splitter panel.
            </summary>
            <param name="panelIndex">Panel index (0-1).</param>
            <param name="panel">Panel contents.</param>
            <param name="noScale">Determines whether the content is to be scaled.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Layout.Splitter.GetPanel(System.Int32)">
            <summary>
            Gets the contents of a secific panel.
            </summary>
            <param name="panelIndex">Panel index (0-1).</param>
            <returns></returns>
        </member>
        <member name="T:Simplex.Gui.Control.Layout.StackLayout">
            <summary>
            Arrange child controls into a row or a column.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Layout.StackLayout.Horizontal">
            <summary>
            If set, arrange child controls into a row instead of a column.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Control.Layout.VerticalLayout">
            <summary>
            Arrange child controls into a column.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Layout.VerticalLayout.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Layout.VerticalLayout"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="T:Simplex.Gui.Control.ListBox">
            <summary>
            ListBox control.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ListBox.AllowMultiSelect">
            <summary>
            Determines whether multiple rows can be selected at once.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ListBox.IsToggle">
            <summary>
            Determines whether rows can be unselected by clicking on them again.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ListBox.RowCount">
            <summary>
            Number of rows in the list box.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ListBox.Item(System.Int32)">
            <summary>
            Returns specific row of the ListBox.
            </summary>
            <param name="index">Row index.</param>
            <returns>Row at the specified index.</returns>
        </member>
        <member name="P:Simplex.Gui.Control.ListBox.SelectedRows">
            <summary>
            List of selected rows.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ListBox.SelectedRow">
            <summary>
            First selected row (and only if list is not multiselectable).
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ListBox.SelectedRowIndex">
            <summary>
            Gets the selected row number.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ListBox.ColumnCount">
            <summary>
            Column count of table rows.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.ListBox.RowSelected">
            <summary>
            Invoked when a row has been selected.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.ListBox.RowUnselected">
            <summary>
            Invoked whan a row has beed unselected.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.ListBox.RowDoubleClicked">
            <summary>
            Invoked whan a row has beed double clicked.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ListBox.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.ListBox"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ListBox.SelectRow(System.Int32,System.Boolean)">
            <summary>
            Selects the specified row by index.
            </summary>
            <param name="index">Row to select.</param>
            <param name="clearOthers">Determines whether to deselect previously selected rows.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ListBox.SelectRows(System.String,System.Boolean)">
            <summary>
            Selects the specified row(s) by text.
            </summary>
            <param name="rowText">Text to search for (exact match).</param>
            <param name="clearOthers">Determines whether to deselect previously selected rows.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ListBox.SelectRowsByRegex(System.String,System.Text.RegularExpressions.RegexOptions,System.Boolean)">
            <summary>
            Selects the specified row(s) by regex text search.
            </summary>
            <param name="pattern">Regex pattern to search for.</param>
            <param name="regexOptions">Regex options.</param>
            <param name="clearOthers">Determines whether to deselect previously selected rows.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ListBox.SelectRow(Simplex.Gui.Control.ControlBase,System.Boolean)">
            <summary>
            Slelects the specified row.
            </summary>
            <param name="control">Row to select.</param>
            <param name="clearOthers">Determines whether to deselect previously selected rows.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ListBox.RemoveAllRows">
            <summary>
            Removes the all rows from the ListBox
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ListBox.RemoveRow(System.Int32)">
            <summary>
            Removes the specified row by index.
            </summary>
            <param name="idx">Row index.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ListBox.AddRow(System.String)">
            <summary>
            Adds a new row.
            </summary>
            <param name="label">Row text.</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.ListBox.AddRow(System.String,System.String)">
            <summary>
            Adds a new row.
            </summary>
            <param name="label">Row text.</param>
            <param name="name">Internal control name.</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.ListBox.AddRow(System.String,System.String,System.Object)">
            <summary>
            Adds a new row.
            </summary>
            <param name="label">Row text.</param>
            <param name="name">Internal control name.</param>
            <param name="UserData">User data for newly created row</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.ListBox.AddRow(Simplex.Gui.Control.ListBoxRow)">
            <summary>
            Add row.
            </summary>
            <param name="row">Row.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ListBox.SetColumnWidth(System.Int32,System.Int32)">
            <summary>
            Sets the column width (in pixels).
            </summary>
            <param name="column">Column index.</param>
            <param name="width">Column width.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ListBox.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ListBox.UnselectAll">
            <summary>
            Deselects all rows.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ListBox.UnselectRow(Simplex.Gui.Control.ListBoxRow)">
            <summary>
            Unselects the specified row.
            </summary>
            <param name="row">Row to unselect.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ListBox.OnRowSelected(Simplex.Gui.Control.ControlBase,Simplex.Gui.Control.ItemSelectedEventArgs)">
            <summary>
            Handler for the row selection event.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ListBox.OnRowDoubleClicked(Simplex.Gui.Control.ControlBase,Simplex.Gui.Control.ClickedEventArgs)">
            <summary>
            Handler for the row double click event.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ListBox.Clear">
            <summary>
            Removes all rows.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ListBox.SelectByText(System.String)">
            <summary>
            Selects the first menu item with the given text it finds. 
            If a menu item can not be found that matches input, nothing happens.
            </summary>
            <param name="text">The label to look for, this is what is shown to the user.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ListBox.SelectByName(System.String)">
            <summary>
            Selects the first menu item with the given internal name it finds.
            If a menu item can not be found that matches input, nothing happens.
            </summary>
            <param name="name">The internal name to look for. To select by what is displayed to the user, use "SelectByText".</param>
        </member>
        <member name="M:Simplex.Gui.Control.ListBox.SelectByUserData(System.Object)">
            <summary>
            Selects the first menu item with the given user data it finds.
            If a menu item can not be found that matches input, nothing happens.
            </summary>
            <param name="userdata">The UserData to look for. The equivalency check uses "param.Equals(item.UserData)".
            If null is passed in, it will look for null/unset UserData.</param>
        </member>
        <member name="T:Simplex.Gui.Control.ListBoxRow">
            <summary>
            List box row (selectable).
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ListBoxRow.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.ListBoxRow"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="P:Simplex.Gui.Control.ListBoxRow.IsSelected">
            <summary>
            Indicates whether the control is selected.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ListBoxRow.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ListBoxRow.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="T:Simplex.Gui.Control.Menu">
            <summary>
            Popup menu.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Menu.ParentMenuItem">
            <summary>
            Parent menu item that owns the menu if this is a child of the menu item.
            Real parent of the menu is the canvas.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Menu.DeleteOnClose">
            <summary>
            Determines whether the menu should be disposed on close.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Menu.ShouldHoverOpenMenu">
            <summary>
            Determines whether the menu should open on mouse hover.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Menu.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Menu"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Menu.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Menu.RenderUnder(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders under the actual control (shadows etc).
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Menu.Open">
            <summary>
             Opens the menu.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Menu.AddItem(System.String)">
            <summary>
            Adds a new menu item.
            </summary>
            <param name="text">Item text.</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.Menu.AddItem(System.String,System.String,System.String)">
            <summary>
            Adds a new menu item.
            </summary>
            <param name="text">Item text.</param>
            <param name="iconName">Icon texture name.</param>
            <param name="accelerator">Accelerator for this item.</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.Menu.AddItem(Simplex.Gui.Control.MenuItem)">
            <summary>
            Adds a menu item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Menu.OnAddItem(Simplex.Gui.Control.MenuItem)">
            <summary>
            Add item handler.
            </summary>
            <param name="item">Item added.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Menu.CloseAll">
            <summary>
            Closes all submenus.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Menu.IsMenuOpen">
            <summary>
            Indicates whether any (sub)menu is open.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Simplex.Gui.Control.Menu.OnHoverItem(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Mouse hover handler.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Menu.Close">
            <summary>
            Closes the current menu.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Menu.FindItems(System.String)">
            <summary>
            Finds all items by name in current menu.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Menu.CloseMenus">
            <summary>
            Closes all submenus and the current menu.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Menu.AddDivider">
            <summary>
            Adds a divider menu item.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Menu.RemoveAll">
            <summary>
            Removes all items.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Control.MenuItem">
            <summary>
            Menu item.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.MenuItem.IsOnStrip">
            <summary>
            Indicates whether the item is on a menu strip.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.MenuItem.IsCheckable">
            <summary>
            Determines if the menu item is checkable.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.MenuItem.IsMenuOpen">
            <summary>
            Indicates if the parent menu is open.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.MenuItem.IsChecked">
            <summary>
            Gets or sets the check value.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.MenuItem.Menu">
            <summary>
            Gets the parent menu.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.MenuItem.Selected">
            <summary>
            Invoked when the item is selected.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.MenuItem.Checked">
            <summary>
            Invoked when the item is checked.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.MenuItem.UnChecked">
            <summary>
            Invoked when the item is unchecked.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.MenuItem.CheckChanged">
            <summary>
            Invoked when the item's check value is changed.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.MenuItem.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.MenuItem"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.MenuItem.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.MenuItem.OnClicked(System.Int32,System.Int32)">
            <summary>
            Internal OnPressed implementation.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.MenuItem.ToggleMenu">
            <summary>
            Toggles the menu open state.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.MenuItem.OpenMenu">
            <summary>
            Opens the menu.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.MenuItem.CloseMenu">
            <summary>
            Closes the menu.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Control.MenuStrip">
            <summary>
            Menu strip.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.MenuStrip.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.MenuStrip"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.MenuStrip.Close">
            <summary>
            Closes the current menu.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.MenuStrip.RenderUnder(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders under the actual control (shadows etc).
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.MenuStrip.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="P:Simplex.Gui.Control.MenuStrip.ShouldHoverOpenMenu">
            <summary>
            Determines whether the menu should open on mouse hover.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.MenuStrip.OnAddItem(Simplex.Gui.Control.MenuItem)">
            <summary>
            Add item handler.
            </summary>
            <param name="item">Item added.</param>
        </member>
        <member name="T:Simplex.Gui.Control.MessageBox">
            <summary>
            Simple message box.
            </summary>
        </member>
        <member name="F:Simplex.Gui.Control.MessageBox.Dismissed">
            <summary>
            Invoked when the message box has been dismissed.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.MessageBox.Show(Simplex.Gui.Control.ControlBase,System.String,System.String,Simplex.Gui.Control.MessageBoxButtons)">
            <summary>
            Show message box.
            </summary>
            <param name="parent">Parent control.</param>
            <param name="text">Message to display.</param>
            <param name="caption">Window caption.</param>
            <param name="buttons">Message box buttons.</param>
            <returns>Message box.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.MessageBox.#ctor(Simplex.Gui.Control.ControlBase,System.String,System.String,Simplex.Gui.Control.MessageBoxButtons)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.MessageBox"/> class.
            </summary>
            <param name="parent">Parent control.</param>
            <param name="text">Message to display.</param>
            <param name="caption">Window caption.</param>
            <param name="buttons">Message box buttons.</param>
        </member>
        <member name="P:Simplex.Gui.Control.MultilineTextBox.HasSelection">
            <summary>
            Indicates whether the text has active selection.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.MultilineTextBox.TextChanged">
            <summary>
            Invoked when the text has changed.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.MultilineTextBox.CursorPosition">
            <summary>
            Get a point representing where the cursor physically appears on the screen.
            Y is line number, X is character position on that line.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.MultilineTextBox.CursorEnd">
            <summary>
            Get a point representing where the endpoint of text selection.
            Y is line number, X is character position on that line.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.MultilineTextBox.AcceptTabs">
            <summary>
            Indicates whether the control will accept Tab characters as input.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.MultilineTextBox.TotalLines">
            <summary>
            Returns the number of lines that are in the Multiline Text Box.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.MultilineTextBox.Text">
            <summary>
            Gets and sets the text to display to the user. Each line is seperated by
            an Environment.NetLine character.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.MultilineTextBox.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.TextBox"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.MultilineTextBox.SetText(System.String,System.Boolean)">
            <summary>
            Sets the label text.
            </summary>
            <param name="text">Text to set.</param>
            <param name="doEvents">Determines whether to invoke "text changed" event.</param>
        </member>
        <member name="M:Simplex.Gui.Control.MultilineTextBox.InsertText(System.String)">
            <summary>
            Inserts text at current cursor position, erasing selection if any.
            </summary>
            <param name="text">Text to insert.</param>
        </member>
        <member name="M:Simplex.Gui.Control.MultilineTextBox.Clear">
            <summary>
            Remove all text.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.MultilineTextBox.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Simplex.Gui.Control.MultilineTextBox.OnMouseDoubleClickedLeft(System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse double click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="M:Simplex.Gui.Control.MultilineTextBox.OnMouseMoved(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse moved event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="dx">X change.</param>
            <param name="dy">Y change.</param>
        </member>
        <member name="M:Simplex.Gui.Control.MultilineTextBox.OnChar(System.Char)">
            <summary>
            Handler for character input event.
            </summary>
            <param name="chr">Character typed.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.MultilineTextBox.OnPaste(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Handler for Paste event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.MultilineTextBox.OnCopy(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Handler for Copy event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.MultilineTextBox.OnCut(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Handler for Cut event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.MultilineTextBox.OnSelectAll(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Handler for Select All event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.MultilineTextBox.OnKeyReturn(System.Boolean)">
            <summary>
            Handler for Return keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.MultilineTextBox.OnKeyBackspace(System.Boolean)">
            <summary>
            Handler for Backspace keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.MultilineTextBox.OnKeyDelete(System.Boolean)">
            <summary>
            Handler for Delete keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.MultilineTextBox.OnKeyUp(System.Boolean)">
            <summary>
            Handler for Up Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.MultilineTextBox.OnKeyDown(System.Boolean)">
            <summary>
            Handler for Down Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.MultilineTextBox.OnKeyLeft(System.Boolean)">
            <summary>
            Handler for Left Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.MultilineTextBox.OnKeyRight(System.Boolean)">
            <summary>
            Handler for Right Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.MultilineTextBox.OnKeyHome(System.Boolean)">
            <summary>
            Handler for Home Key keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.MultilineTextBox.OnKeyEnd(System.Boolean)">
            <summary>
            Handler for End Key keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.MultilineTextBox.OnKeyTab(System.Boolean)">
            <summary>
            Handler for Tab Key keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.MultilineTextBox.GetSelection">
            <summary>
            Returns currently selected text.
            </summary>
            <returns>Current selection.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.MultilineTextBox.EraseSelection">
            <summary>
            Deletes selected text.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.MultilineTextBox.ScrollChanged(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Refreshes the cursor location and selected area when the inner panel scrolls
            </summary>
            <param name="control">The inner panel the text is embedded in</param>
        </member>
        <member name="M:Simplex.Gui.Control.MultilineTextBox.OnTextChanged">
            <summary>
            Handler for text changed event.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.MultilineTextBox.UpdateText">
            <summary>
            Invalidates the control.
            </summary>
            <remarks>
            Causes layout, repaint, invalidates cached texture.
            </remarks>
        </member>
        <member name="M:Simplex.Gui.Control.MultilineTextBox.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Simplex.Gui.Control.NumericUpDown">
            <summary>
            Numeric up/down.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.NumericUpDown.Min">
            <summary>
            Minimum value.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.NumericUpDown.Max">
            <summary>
            Maximum value.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.NumericUpDown.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.NumericUpDown"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="E:Simplex.Gui.Control.NumericUpDown.ValueChanged">
            <summary>
            Invoked when the value has been changed.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.NumericUpDown.OnKeyUp(System.Boolean)">
            <summary>
            Handler for Up Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.NumericUpDown.OnKeyDown(System.Boolean)">
            <summary>
            Handler for Down Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.NumericUpDown.OnButtonUp(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Handler for the button up event.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Simplex.Gui.Control.NumericUpDown.OnButtonDown(Simplex.Gui.Control.ControlBase,Simplex.Gui.Control.ClickedEventArgs)">
            <summary>
            Handler for the button down event.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Simplex.Gui.Control.NumericUpDown.IsTextAllowed(System.String)">
            <summary>
            Determines whether the text can be assighed to the control.
            </summary>
            <param name="str">Text to evaluate.</param>
            <returns>True if the text is allowed.</returns>
        </member>
        <member name="P:Simplex.Gui.Control.NumericUpDown.Value">
            <summary>
            Numeric value of the control.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.NumericUpDown.OnTextChanged">
            <summary>
            Handler for the text changed event.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Popup.DeleteOnClose">
            <summary>
            Determines whether the popup should be disposed on close.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Popup.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Popup"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Popup.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Popup.RenderUnder(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders under the actual control (shadows etc).
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Popup.Open(Simplex.Gui.Point)">
            <summary>
             Opens the popup.
            </summary>
            <param name="pos">Position where to open.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Popup.Close">
            <summary>
            Closes the current popup.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Popup.CloseMenus">
            <summary>
            Closes all menus and popups.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Control.ProgressBar">
            <summary>
            Progress bar.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ProgressBar.IsHorizontal">
            <summary>
            Determines whether the control is horizontal.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ProgressBar.Value">
            <summary>
            Progress value (0-1).
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ProgressBar.AutoLabel">
            <summary>
            Determines whether the label text is autogenerated from value.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ProgressBar.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.ProgressBar"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ProgressBar.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Simplex.Gui.Control.Properties">
            <summary>
            Properties table.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Properties.LabelWidth">
            <summary>
            Width of the first column (property names).
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.Properties.ValueChanged">
            <summary>
            Invoked when a property value has been changed.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Properties.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Properties"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Properties.OnSplitterMoved(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Handles the splitter moved event.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Properties.Add(System.String,System.String)">
            <summary>
            Adds a new text property row.
            </summary>
            <param name="label">Property name.</param>
            <param name="value">Initial value.</param>
            <returns>Newly created row.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.Properties.Add(System.String,Simplex.Gui.Control.Property.PropertyBase,System.String)">
            <summary>
            Adds a new property row.
            </summary>
            <param name="label">Property name.</param>
            <param name="prop">Property control.</param>
            <param name="value">Initial value.</param>
            <returns>Newly created row.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.Properties.DeleteAll">
            <summary>
            Deletes all rows.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Control.Property.Check">
            <summary>
            Checkable property.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Property.Check.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Property.Check"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="P:Simplex.Gui.Control.Property.Check.Value">
            <summary>
            Property value.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Property.Check.SetValue(System.String,System.Boolean)">
            <summary>
            Sets the property value.
            </summary>
            <param name="value">Value to set.</param>
            <param name="fireEvents">Determines whether to fire "value changed" event.</param>
        </member>
        <member name="P:Simplex.Gui.Control.Property.Check.IsEditing">
            <summary>
            Indicates whether the property value is being edited.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Property.Check.IsHovered">
            <summary>
            Indicates whether the control is hovered by mouse pointer.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Control.Property.Color">
            <summary>
            Color property.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Property.Color.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Property.Color"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Property.Color.OnButtonPressed(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Color-select button press handler.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Property.Color.OnColorChanged(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Color changed handler.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="P:Simplex.Gui.Control.Property.Color.Value">
            <summary>
            Property value.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Property.Color.SetValue(System.String,System.Boolean)">
            <summary>
            Sets the property value.
            </summary>
            <param name="value">Value to set.</param>
            <param name="fireEvents">Determines whether to fire "value changed" event.</param>
        </member>
        <member name="P:Simplex.Gui.Control.Property.Color.IsEditing">
            <summary>
            Indicates whether the property value is being edited.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Control.Property.PropertyBase">
            <summary>
            Base control for property entry.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Property.PropertyBase.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Property.PropertyBase"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="E:Simplex.Gui.Control.Property.PropertyBase.ValueChanged">
            <summary>
            Invoked when the property value has been changed.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Property.PropertyBase.Value">
            <summary>
            Property value (todo: always string, which is ugly. do something about it).
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Property.PropertyBase.IsEditing">
            <summary>
            Indicates whether the property value is being edited.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Property.PropertyBase.SetValue(System.String,System.Boolean)">
            <summary>
            Sets the property value.
            </summary>
            <param name="value">Value to set.</param>
            <param name="fireEvents">Determines whether to fire "value changed" event.</param>
        </member>
        <member name="T:Simplex.Gui.Control.Property.Text">
            <summary>
            Text property.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Property.Text.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Property.Text"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="P:Simplex.Gui.Control.Property.Text.Value">
            <summary>
            Property value.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Property.Text.SetValue(System.String,System.Boolean)">
            <summary>
            Sets the property value.
            </summary>
            <param name="value">Value to set.</param>
            <param name="fireEvents">Determines whether to fire "value changed" event.</param>
        </member>
        <member name="P:Simplex.Gui.Control.Property.Text.IsEditing">
            <summary>
            Indicates whether the property value is being edited.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Property.Text.IsHovered">
            <summary>
            Indicates whether the control is hovered by mouse pointer.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Control.PropertyRow">
            <summary>
            Single property row.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.PropertyRow.ValueChanged">
            <summary>
            Invoked when the property value has changed.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.PropertyRow.IsEditing">
            <summary>
            Indicates whether the property value is being edited.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.PropertyRow.Value">
            <summary>
            Property value.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.PropertyRow.IsHovered">
            <summary>
            Indicates whether the control is hovered by mouse pointer.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.PropertyRow.Label">
            <summary>
            Property name.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.PropertyRow.#ctor(Simplex.Gui.Control.ControlBase,Simplex.Gui.Control.Property.PropertyBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.PropertyRow"/> class.
            </summary>
            <param name="parent">Parent control.</param>
            <param name="prop">Property control associated with this row.</param>
        </member>
        <member name="M:Simplex.Gui.Control.PropertyRow.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Simplex.Gui.Control.PropertyTree">
            <summary>
            Property table/tree.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.PropertyTree.LabelWidth">
            <summary>
            Width of the first column (property names).
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.PropertyTree.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.PropertyTree"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.PropertyTree.Add(System.String)">
            <summary>
            Adds a new properties node.
            </summary>
            <param name="label">Node label.</param>
            <returns>Newly created control</returns>
        </member>
        <member name="M:Simplex.Gui.Control.PropertyTree.ExpandAll">
            <summary>
            Opens the node and all child nodes.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.PropertyTree.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Simplex.Gui.Control.RadioButton">
            <summary>
            Radio button.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.RadioButton.AllowUncheck">
            <summary>
            Determines whether unchecking is allowed.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.RadioButton.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.RadioButton"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.RadioButton.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Simplex.Gui.Control.RadioButtonGroup">
            <summary>
            Radio button group.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.RadioButtonGroup.Selected">
            <summary>
            Selected radio button.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.RadioButtonGroup.SelectedName">
            <summary>
            Internal name of the selected radio button.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.RadioButtonGroup.SelectedLabel">
            <summary>
            Text of the selected radio button.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.RadioButtonGroup.SelectedIndex">
            <summary>
            Index of the selected radio button.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.RadioButtonGroup.SelectionChanged">
            <summary>
            Invoked when the selected option has changed.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.RadioButtonGroup.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.RadioButtonGroup"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.RadioButtonGroup.AddOption(System.String,System.String,System.Object)">
            <summary>
            Adds a new option.
            </summary>
            <param name="text">Option text.</param>
            <param name="optionName">Internal name.</param>
            <param name="userData">User data.</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.RadioButtonGroup.AddOption(Simplex.Gui.Control.LabeledRadioButton)">
            <summary>
            Adds an option.
            </summary>
            <param name="lrb">Radio button.</param>
        </member>
        <member name="M:Simplex.Gui.Control.RadioButtonGroup.OnRadioClicked(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Handler for the option change.
            </summary>
            <param name="fromPanel">Event source.</param>
        </member>
        <member name="M:Simplex.Gui.Control.RadioButtonGroup.SetSelection(System.Int32)">
            <summary>
            Selects the specified option.
            </summary>
            <param name="index">Option to select.</param>
        </member>
        <member name="M:Simplex.Gui.Control.RadioButtonGroup.SetSelectionByName(System.String)">
            <summary>
            Selects the specified option.
            </summary>
            <param name="name">Option name to select.</param>
        </member>
        <member name="M:Simplex.Gui.Control.RadioButtonGroup.SelectByUserData(System.Object)">
            <summary>
            Selects the specified option with the given user data it finds.
            </summary>
            <param name="userdata">The UserData to look for. The equivalency check uses "param.Equals(item.UserData)".
            If null is passed in, it will look for null/unset UserData.</param>
        </member>
        <member name="T:Simplex.Gui.Control.ResizableControl">
            <summary>
            Base resizable control.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ResizableControl.Resizing">
            <summary>
            Enable or disable resizing.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ResizableControl.ClampMovement">
            <summary>
            Determines whether control's position should be restricted to its parent bounds.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.ResizableControl.Resized">
            <summary>
            Invoked when the control has been resized.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ResizableControl.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.ResizableControl"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ResizableControl.OnResized(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Handler for the resized event.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ResizableControl.EnableResizing(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Enable or disable resizing.
            </summary>
            <param name="left">Is resizing left edge enabled.</param>
            <param name="top">Is resizing top edge enabled.</param>
            <param name="right">Is resizing right edge enabled.</param>
            <param name="bottom">Is resizing bottom edge enabled.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ResizableControl.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the control bounds.
            </summary>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
            <returns>
            True if bounds changed.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.ResizableControl.SetSize(System.Int32,System.Int32)">
            <summary>
            Sets the control size.
            </summary>
            <param name="width">New width.</param>
            <param name="height">New height.</param>
            <returns>True if bounds changed.</returns>
        </member>
        <member name="T:Simplex.Gui.Control.RichLabel">
            <summary>
            Multiline label with text chunks having different color/font.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.RichLabel.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.RichLabel"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="T:Simplex.Gui.Control.ScrollControl">
            <summary>
            Base for controls whose interior can be scrolled.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ScrollControl.CanScrollH">
            <summary>
            Indicates whether the control can be scrolled horizontally.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ScrollControl.CanScrollV">
            <summary>
            Indicates whether the control can be scrolled vertically.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ScrollControl.AutoSizeToContent">
            <summary>
            If set, try to set the control size the same as the content size. If it doesn't fit, enable scrolling.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.ScrollControl.AutoHideBars">
            <summary>
            Determines whether the scroll bars should be hidden if not needed.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ScrollControl.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.ScrollControl"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ScrollControl.EnableScroll(System.Boolean,System.Boolean)">
            <summary>
            Enables or disables inner scrollbars.
            </summary>
            <param name="horizontal">Determines whether the horizontal scrollbar should be enabled.</param>
            <param name="vertical">Determines whether the vertical scrollbar should be enabled.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ScrollControl.OnMouseWheeled(System.Int32)">
            <summary>
            Handler invoked on mouse wheel event.
            </summary>
            <param name="delta">Scroll delta.</param>
            <returns></returns>
        </member>
        <member name="M:Simplex.Gui.Control.ScrollControl.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ScrollControl.EnsureVisible(Simplex.Gui.Rectangle)">
            <summary>
            Ensure that given rectangle is visible on the scroll control.
            </summary>
            <param name="rect">Rectange to make visible.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ScrollControl.EnsureVisible(Simplex.Gui.Rectangle,Simplex.Gui.Size)">
            <summary>
            Ensure that given rectangle is visible on the scroll control. If scrolling is needed, minimum scrolling is given as a parameter.
            </summary>
            <param name="rect">Rectange to make visible.</param>
            <param name="minChange">Minimum scrolling if scrolling needed.</param>
        </member>
        <member name="T:Simplex.Gui.Control.StatusBar">
            <summary>
            Status bar.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.StatusBar.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.StatusBar"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.StatusBar.AddControl(Simplex.Gui.Control.ControlBase,System.Boolean)">
            <summary>
            Adds a control to the bar.
            </summary>
            <param name="control">Control to add.</param>
            <param name="right">Determines whether the control should be added to the right side of the bar.</param>
        </member>
        <member name="M:Simplex.Gui.Control.StatusBar.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Simplex.Gui.Control.TabControl">
            <summary>
            Control with multiple tabs that can be reordered and dragged.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.TabControl.TabAdded">
            <summary>
            Invoked when a tab has been added.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.TabControl.TabRemoved">
            <summary>
            Invoked when a tab has been removed.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.TabControl.AllowReorder">
            <summary>
            Determines if tabs can be reordered by dragging.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.TabControl.CurrentButton">
            <summary>
            Currently active tab button.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.TabControl.TabStripPosition">
            <summary>
            Current tab strip position.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.TabControl.TabStrip">
            <summary>
            Tab strip.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.TabControl.TabCount">
            <summary>
            Number of tabs in the control.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.TabControl.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.TabControl"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.TabControl.AddPage(System.String,Simplex.Gui.Control.ControlBase)">
            <summary>
            Adds a new page/tab.
            </summary>
            <param name="label">Tab label.</param>
            <param name="page">Page contents.</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.TabControl.AddPage(Simplex.Gui.Control.Internal.TabButton)">
            <summary>
            Adds a page/tab.
            </summary>
            <param name="button">Page to add. (well, it's a TabButton which is a parent to the page).</param>
        </member>
        <member name="M:Simplex.Gui.Control.TabControl.OnTabPressed(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Handler for tab selection.
            </summary>
            <param name="control">Event source (TabButton).</param>
        </member>
        <member name="M:Simplex.Gui.Control.TabControl.OnLoseTab(Simplex.Gui.Control.Internal.TabButton)">
            <summary>
            Handler for tab removing.
            </summary>
            <param name="button"></param>
        </member>
        <member name="T:Simplex.Gui.Control.Table">
            <summary>
            Base class for multi-column tables.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Table.ColumnCount">
            <summary>
            Column count (default 1).
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Table.RowCount">
            <summary>
            Row count.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Table.Item(System.Int32)">
            <summary>
            Returns specific row of the table.
            </summary>
            <param name="index">Row index.</param>
            <returns>Row at the specified index.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.Table.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Table"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Table.SetColumnCount(System.Int32)">
            <summary>
            Sets the number of columns.
            </summary>
            <param name="count">Number of columns.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Table.SetColumnWidth(System.Int32,System.Int32)">
            <summary>
            Sets the column width (in pixels).
            </summary>
            <param name="column">Column index.</param>
            <param name="width">Column width.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Table.GetColumnWidth(System.Int32)">
            <summary>
            Gets the column width (in pixels).
            </summary>
            <param name="column">Column index.</param>
            <returns>Column width.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.Table.AddRow">
            <summary>
            Adds a new empty row.
            </summary>
            <returns>Newly created row.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.Table.AddRow(Simplex.Gui.Control.TableRow)">
            <summary>
            Adds a new row.
            </summary>
            <param name="row">Row to add.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Table.AddRow(System.String)">
            <summary>
            Adds a new row with specified text in first column.
            </summary>
            <param name="text">Text to add.</param>
            <returns>New row.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.Table.RemoveRow(Simplex.Gui.Control.TableRow)">
            <summary>
            Removes a row by reference.
            </summary>
            <param name="row">Row to remove.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Table.RemoveRow(System.Int32)">
            <summary>
            Removes a row by index.
            </summary>
            <param name="idx">Row index.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Table.RemoveAll">
            <summary>
            Removes all rows.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Table.GetRowIndex(Simplex.Gui.Control.TableRow)">
            <summary>
            Gets the index of a specified row.
            </summary>
            <param name="row">Row to search for.</param>
            <returns>Row index if found, -1 otherwise.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.Table.SizeToContent(System.Int32)">
            <summary>
            Sizes to fit contents.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Control.TableRow">
            <summary>
            Single table row.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.TableRow.Selected">
            <summary>
            Invoked when the row has been selected.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.TableRow.ColumnCount">
            <summary>
            Column count.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.TableRow.EvenRow">
            <summary>
            Indicates whether the row is even or odd (used for alternate coloring).
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.TableRow.Text">
            <summary>
            Text of the first column.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.TableRow.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.TableRow"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.TableRow.SetColumnCount(System.Int32)">
            <summary>
            Sets the number of columns.
            </summary>
            <param name="columnCount">Number of columns.</param>
        </member>
        <member name="M:Simplex.Gui.Control.TableRow.SetColumnWidth(System.Int32,System.Int32)">
            <summary>
            Sets the column width (in pixels).
            </summary>
            <param name="column">Column index.</param>
            <param name="width">Column width.</param>
        </member>
        <member name="M:Simplex.Gui.Control.TableRow.SetCellText(System.Int32,System.String)">
            <summary>
            Sets the text of a specified cell.
            </summary>
            <param name="columnIndex">Column number.</param>
            <param name="text">Text to set.</param>
        </member>
        <member name="M:Simplex.Gui.Control.TableRow.SetCellContents(System.Int32,Simplex.Gui.Control.ControlBase,System.Boolean)">
            <summary>
            Sets the contents of a specified cell.
            </summary>
            <param name="column">Column number.</param>
            <param name="control">Cell contents.</param>
            <param name="enableMouseInput">Determines whether mouse input should be enabled for the cell.</param>
        </member>
        <member name="M:Simplex.Gui.Control.TableRow.GetCellContents(System.Int32)">
            <summary>
            Gets the contents of a specified cell.
            </summary>
            <param name="column">Column number.</param>
            <returns>Control embedded in the cell.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.TableRow.SetTextColor(Simplex.Gui.Color)">
            <summary>
            Sets the text color for all cells.
            </summary>
            <param name="color">Text color.</param>
        </member>
        <member name="M:Simplex.Gui.Control.TableRow.GetText(System.Int32)">
            <summary>
            Returns text of a specified row cell (default first).
            </summary>
            <param name="column">Column index.</param>
            <returns>Column cell text.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.TableRow.OnCopy(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Handler for Copy event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="T:Simplex.Gui.Control.TextBox">
            <summary>
            Text box (editable).
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.TextBox.SelectAllOnFocus">
            <summary>
            Determines whether text should be selected when the control is focused.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.TextBox.HasSelection">
            <summary>
            Indicates whether the text has active selection.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.TextBox.TextChanged">
            <summary>
            Invoked when the text has changed.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.TextBox.SubmitPressed">
            <summary>
            Invoked when the submit key has been pressed.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.TextBox.CursorPos">
            <summary>
            Current cursor position (character index).
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.TextBox.Text">
            <summary>
            Text.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.TextBox.TextColor">
            <summary>
            Text color.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.TextBox.TextColorOverride">
            <summary>
            Override text color (used by tooltips).
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.TextBox.TextOverride">
            <summary>
            Text override - used to display different string.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.TextBox.Font">
            <summary>
            Font.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.TextBox.FitToText">
            <summary>
            Set the size of the control to be able to show the text of this property.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.TextBox.IsTextAllowed(System.String,System.Int32)">
            <summary>
            Determines whether the control can insert text at a given cursor position.
            </summary>
            <param name="text">Text to check.</param>
            <param name="position">Cursor position.</param>
            <returns>True if allowed.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.TextBox.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.TextBox"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.TextBox.SetText(System.String,System.Boolean)">
            <summary>
            Sets the label text.
            </summary>
            <param name="str">Text to set.</param>
            <param name="doEvents">Determines whether to invoke "text changed" event.</param>
        </member>
        <member name="M:Simplex.Gui.Control.TextBox.InsertText(System.String)">
            <summary>
            Inserts text at current cursor position, erasing selection if any.
            </summary>
            <param name="text">Text to insert.</param>
        </member>
        <member name="M:Simplex.Gui.Control.TextBox.DeleteText(System.Int32,System.Int32)">
            <summary>
            Deletes text.
            </summary>
            <param name="startPos">Starting cursor position.</param>
            <param name="length">Length in characters.</param>
        </member>
        <member name="M:Simplex.Gui.Control.TextBox.OnTextChanged">
            <summary>
            Handler for text changed event.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.TextBox.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Simplex.Gui.Control.TextBox.OnMouseDoubleClickedLeft(System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse double click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="M:Simplex.Gui.Control.TextBox.OnMouseMoved(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse moved event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="dx">X change.</param>
            <param name="dy">Y change.</param>
        </member>
        <member name="M:Simplex.Gui.Control.TextBox.OnChar(System.Char)">
            <summary>
            Handler for character input event.
            </summary>
            <param name="chr">Character typed.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.TextBox.OnPaste(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Handler for Paste event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.TextBox.OnCopy(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Handler for Copy event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.TextBox.OnCut(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Handler for Cut event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.TextBox.OnSelectAll(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Handler for Select All event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.TextBox.OnKeyReturn(System.Boolean)">
            <summary>
            Handler for Return keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.TextBox.OnKeyEscape(System.Boolean)">
            <summary>
            Handler for Escape keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.TextBox.OnKeyBackspace(System.Boolean)">
            <summary>
            Handler for Backspace keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.TextBox.OnKeyDelete(System.Boolean)">
            <summary>
            Handler for Delete keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.TextBox.OnKeyLeft(System.Boolean)">
            <summary>
            Handler for Left Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.TextBox.OnKeyRight(System.Boolean)">
            <summary>
            Handler for Right Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.TextBox.OnKeyHome(System.Boolean)">
            <summary>
            Handler for Home keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.TextBox.OnKeyEnd(System.Boolean)">
            <summary>
            Handler for End keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Simplex.Gui.Control.TextBox.OnReturn">
            <summary>
            Handler for the return key.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.TextBox.GetSelection">
            <summary>
            Returns currently selected text.
            </summary>
            <returns>Current selection.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.TextBox.EraseSelection">
            <summary>
            Deletes selected text.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.TextBox.GetClosestCharacter(System.Int32,System.Int32)">
            <summary>
            Returns index of the character closest to specified point (in canvas coordinates).
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Simplex.Gui.Control.TextBox.GetCharacterPosition(System.Int32)">
            <summary>
            Gets the coordinates of specified character.
            </summary>
            <param name="index">Character index.</param>
            <returns>Character coordinates (local).</returns>
        </member>
        <member name="M:Simplex.Gui.Control.TextBox.RenderFocus(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the focus overlay.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.TextBox.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Simplex.Gui.Control.TextBoxNumeric">
            <summary>
            Numeric text box - accepts only float numbers.
            </summary>
        </member>
        <member name="F:Simplex.Gui.Control.TextBoxNumeric.m_Value">
            <summary>
            Current numeric value.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.TextBoxNumeric.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.TextBoxNumeric"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.TextBoxNumeric.IsTextAllowed(System.String,System.Int32)">
            <summary>
            Determines whether the control can insert text at a given cursor position.
            </summary>
            <param name="text">Text to check.</param>
            <param name="position">Cursor position.</param>
            <returns>True if allowed.</returns>
        </member>
        <member name="P:Simplex.Gui.Control.TextBoxNumeric.Value">
            <summary>
            Current numerical value.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.TextBoxNumeric.OnTextChanged">
            <summary>
            Handler for text changed event.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.TextBoxNumeric.SetText(System.String,System.Boolean)">
            <summary>
            Sets the control text.
            </summary>
            <param name="str">Text to set.</param>
            <param name="doEvents">Determines whether to invoke "text changed" event.</param>
        </member>
        <member name="M:Simplex.Gui.Control.TextBoxNumeric.SetValue(System.Single,System.Boolean)">
            <summary>
            Sets the control value.
            </summary>
            <param name="value">Value to set.</param>
            <param name="doEvents">Determines whether to invoke "text changed" event.</param>
        </member>
        <member name="T:Simplex.Gui.Control.TextBoxPassword">
            <summary>
            Text box with masked text.
            </summary>
            <remarks>
            This class doesn't prevent programatic access to the text in any way.
            </remarks>
        </member>
        <member name="P:Simplex.Gui.Control.TextBoxPassword.MaskCharacter">
            <summary>
            Character used in place of actual characters for display.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.TextBoxPassword.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.TextBoxPassword"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.TextBoxPassword.OnTextChanged">
            <summary>
            Handler for text changed event.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.ToolWindow.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.ToolWindow"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ToolWindow.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ToolWindow.RenderUnder(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders under the actual control (shadows etc).
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.ToolWindow.RenderFocus(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the focus overlay.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Simplex.Gui.Control.TreeControl">
            <summary>
            Tree control.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.TreeControl.SelectedNodes">
            <summary>
            List of selected nodes.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.TreeControl.SelectedNode">
            <summary>
            First selected node (and only if nodes are not multiselectable).
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.TreeControl.AllowMultiSelect">
            <summary>
            Determines if multiple nodes can be selected at the same time.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.TreeControl.RootNode">
            <summary>
            Get the root node of the tree view. Root node is an invisible always expanded node that works
            as a parent node for all first tier nodes visible on the control.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.TreeControl.SelectionChanged">
            <summary>
            Invoked when the node's selected state has changed.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.TreeControl.Selected">
            <summary>
            Invoked when the node has been selected.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.TreeControl.Unselected">
            <summary>
            Invoked when the node has been unselected.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.TreeControl.NodeDoubleClicked">
            <summary>
            Invoked when the node has been double clicked and contains no child nodes.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.TreeControl.Expanded">
            <summary>
            Invoked when the node has been expanded.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.TreeControl.Collapsed">
            <summary>
            Invoked when the node has been collapsed.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.TreeControl.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.TreeControl"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.TreeControl.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.TreeControl.AddNode(System.String,System.String,System.Object)">
            <summary>
            Adds a new child node.
            </summary>
            <param name="label">Node's label.</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.TreeControl.RemoveAll">
            <summary>
            Removes all child nodes.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.TreeControl.RemoveNode(Simplex.Gui.Control.TreeNode)">
            <summary>
            Remove node and all of it's child nodes.
            </summary>
            <param name="node">Node to remove.</param>
        </member>
        <member name="M:Simplex.Gui.Control.TreeControl.RemoveAllNodes">
            <summary>
            Remove all nodes.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.TreeControl.ExpandAll">
            <summary>
            Opens the node and all child nodes.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.TreeControl.UnselectAll">
            <summary>
            Clears the selection on the node and all child nodes.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.TreeControl.FindNodeByUserData(System.Object,System.Boolean)">
            <summary>
            Find a node bu user data.
            </summary>
            <param name="userData">Node user data.</param>
            <param name="recursive">Determines whether the search should be recursive.</param>
            <returns>Found node or null.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.TreeControl.FindNodeByName(System.String,System.Boolean)">
            <summary>
            Find a node by name.
            </summary>
            <param name="name">Node name</param>
            <param name="recursive">Determines whether the search should be recursive.</param>
            <returns>Found node or null.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.TreeControl.OnNodeAdded(Simplex.Gui.Control.TreeNode)">
            <summary>
            Handler for node added event.
            </summary>
            <param name="node">Node added.</param>
        </member>
        <member name="M:Simplex.Gui.Control.TreeControl.OnNodeSelected(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Handler for node selected event.
            </summary>
            <param name="Control">Node selected.</param>
        </member>
        <member name="T:Simplex.Gui.Control.TreeNode">
            <summary>
            Tree control node.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.TreeNode.RootNode">
            <summary>
            Root node of the tree view.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.TreeNode.TreeControl">
            <summary>
            Parent tree control.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.TreeNode.IsRoot">
            <summary>
            Indicates whether this is a root node.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.TreeNode.IsSelectable">
            <summary>
            Determines whether the node is selectable.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.TreeNode.IsSelected">
            <summary>
            Indicates whether the node is selected.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.TreeNode.Text">
            <summary>
            Node's label.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.TreeNode.SelectedChildren">
            <summary>
            List of selected nodes.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.TreeNode.LabelPressed">
            <summary>
            Invoked when the node label has been pressed.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.TreeNode.SelectionChanged">
            <summary>
            Invoked when the node's selected state has changed.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.TreeNode.Selected">
            <summary>
            Invoked when the node has been selected.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.TreeNode.NodeDoubleClicked">
            <summary>
            Invoked when the node has been double clicked and contains no child nodes.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.TreeNode.Unselected">
            <summary>
            Invoked when the node has been unselected.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.TreeNode.Expanded">
            <summary>
            Invoked when the node has been expanded.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.TreeNode.Collapsed">
            <summary>
            Invoked when the node has been collapsed.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.TreeNode.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.TreeNode"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.TreeNode.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.TreeNode.AddNode(System.String,System.String,System.Object)">
            <summary>
            Adds a new child node.
            </summary>
            <param name="label">Node's label.</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.TreeNode.RemoveNode(Simplex.Gui.Control.TreeNode)">
            <summary>
            Remove node and all of it's child nodes.
            </summary>
            <param name="node">Node to remove.</param>
        </member>
        <member name="M:Simplex.Gui.Control.TreeNode.RemoveAllNodes">
            <summary>
            Remove all nodes.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.TreeNode.Open">
            <summary>
            Opens the node.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.TreeNode.Close">
            <summary>
            Closes the node.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.TreeNode.ExpandAll">
            <summary>
            Opens the node and all child nodes.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.TreeNode.UnselectAll">
            <summary>
            Clears the selection on the node and all child nodes.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.TreeNode.FindNodeByUserData(System.Object,System.Boolean)">
            <summary>
            Find a node bu user data.
            </summary>
            <param name="userData">Node user data.</param>
            <param name="recursive">Determines whether the search should be recursive.</param>
            <returns>Found node or null.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.TreeNode.FindNodeByName(System.String,System.Boolean)">
            <summary>
            Find a node by name.
            </summary>
            <param name="name">Node name</param>
            <param name="recursive">Determines whether the search should be recursive.</param>
            <returns>Found node or null.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.TreeNode.OnToggleButtonPress(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Handler for the toggle button.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Simplex.Gui.Control.TreeNode.OnDoubleClickName(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Handler for label double click.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Simplex.Gui.Control.TreeNode.OnClickName(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Handler for label click.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="T:Simplex.Gui.Control.VerticalScrollBar">
            <summary>
            Vertical scrollbar.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.VerticalScrollBar.BarSize">
            <summary>
            Bar size (in pixels).
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.VerticalScrollBar.BarPos">
            <summary>
            Bar position (in pixels).
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.VerticalScrollBar.ButtonSize">
            <summary>
            Button size (in pixels).
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.VerticalScrollBar.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.VerticalScrollBar"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.VerticalScrollBar.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Simplex.Gui.Control.VerticalScrollBar.SetScrollAmount(System.Single,System.Boolean)">
            <summary>
            Sets the scroll amount (0-1).
            </summary>
            <param name="value">Scroll amount.</param>
            <param name="forceUpdate">Determines whether the control should be updated.</param>
            <returns>True if control state changed.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.VerticalScrollBar.OnBarMoved(Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Handler for the BarMoved event.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="T:Simplex.Gui.Control.VerticalSlider">
            <summary>
            Vertical slider.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.VerticalSlider.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.VerticalSlider"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.VerticalSlider.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Simplex.Gui.Control.VerticalSlider.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="P:Simplex.Gui.Control.VerticalSplitter.Value">
            <summary>
            Splitter position (0 - 1)
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.VerticalSplitter.IsZoomed">
            <summary>
            Indicates whether any of the panels is zoomed.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.VerticalSplitter.SplittersVisible">
            <summary>
            Gets or sets a value indicating whether splitters should be visible.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.VerticalSplitter.SplitterSize">
            <summary>
            Gets or sets the size of the splitter.
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.VerticalSplitter.PanelZoomed">
            <summary>
            Invoked when one of the panels has been zoomed (maximized).
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.VerticalSplitter.PanelUnZoomed">
            <summary>
            Invoked when one of the panels has been unzoomed (restored).
            </summary>
        </member>
        <member name="E:Simplex.Gui.Control.VerticalSplitter.ZoomChanged">
            <summary>
            Invoked when the zoomed panel has been changed.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.VerticalSplitter.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.CrossSplitter"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.VerticalSplitter.CenterPanels">
            <summary>
            Centers the panels so that they take even amount of space.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.VerticalSplitter.SetPanel(System.Int32,Simplex.Gui.Control.ControlBase)">
            <summary>
            Assigns a control to the specific inner section.
            </summary>
            <param name="index">Section index (0-3).</param>
            <param name="panel">Control to assign.</param>
        </member>
        <member name="M:Simplex.Gui.Control.VerticalSplitter.GetPanel(System.Int32)">
            <summary>
            Gets the specific inner section.
            </summary>
            <param name="index">Section index (0-3).</param>
            <returns>Specified section.</returns>
        </member>
        <member name="M:Simplex.Gui.Control.VerticalSplitter.OnZoomChanged">
            <summary>
            Internal handler for the zoom changed event.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.VerticalSplitter.Zoom(System.Int32)">
            <summary>
            Maximizes the specified panel so it fills the entire control.
            </summary>
            <param name="section">Panel index (0-3).</param>
        </member>
        <member name="M:Simplex.Gui.Control.VerticalSplitter.UnZoom">
            <summary>
            Restores the control so all panels are visible.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Control.Window">
            <summary>
            Movable window with title bar.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Window.Title">
            <summary>
            Window caption.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Window.IsClosable">
            <summary>
            Determines whether the window has close button.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Window.ModalBackground">
            <summary>
            Make window modal and set background color. If alpha value is zero, make background dimmed.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Control.Window.Modal">
            <summary>
            Set true to make window modal.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Control.Window.#ctor(Simplex.Gui.Control.ControlBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Control.Window"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Window.MakeModal(System.Boolean,System.Nullable{Simplex.Gui.Color})">
            <summary>
            Makes the window modal: covers the whole canvas and gets all input.
            </summary>
            <param name="dim">Determines whether all the background should be dimmed.</param>
            <param name="backgroundColor">Determines background color.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Window.Render(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Window.RenderUnder(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders under the actual control (shadows etc).
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Simplex.Gui.Control.Window.RenderFocus(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the focus overlay.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Simplex.Gui.DragDrop.DragAndDrop">
            <summary>
            Drag and drop handling.
            </summary>
        </member>
        <member name="T:Simplex.Gui.HorizontalAlign">
            <summary>
            Horizontal align for controls
            ToDo: make use of it
            </summary>
        </member>
        <member name="F:Simplex.Gui.HorizontalAlign.Left">
            <summary>
            gets aligned left
            </summary>
        </member>
        <member name="F:Simplex.Gui.HorizontalAlign.Center">
            <summary>
            gets aligned at the center
            </summary>
        </member>
        <member name="F:Simplex.Gui.HorizontalAlign.Right">
            <summary>
            gets aligned at the right
            </summary>
        </member>
        <member name="T:Simplex.Gui.TextAlign">
            <summary>
            the horizontal textalignment
            </summary>
        </member>
        <member name="F:Simplex.Gui.TextAlign.Left">
            <summary>
            text gets aligned at the left
            </summary>
        </member>
        <member name="F:Simplex.Gui.TextAlign.Center">
            <summary>
            text gets aligned at the center
            </summary>
        </member>
        <member name="F:Simplex.Gui.TextAlign.Right">
            <summary>
            text gets aligned at the right
            </summary>
        </member>
        <member name="T:Simplex.Gui.VerticalAlign">
            <summary>
            the vertical alignment for controls
            ToDo : make use of it
            </summary>
        </member>
        <member name="F:Simplex.Gui.VerticalAlign.Top">
            <summary>
            gets aligend at top
            </summary>
        </member>
        <member name="F:Simplex.Gui.VerticalAlign.Center">
            <summary>
            gets aligned at the middle
            </summary>
        </member>
        <member name="F:Simplex.Gui.VerticalAlign.Bottom">
            <summary>
            gets aligned at the bottom
            </summary>
        </member>
        <member name="T:Simplex.Gui.FontStyle">
            <summary>
            Font style.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Font">
            <summary>
            Represents font resource.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Font.FaceName">
            <summary>
            Font face name. Exact meaning depends on renderer.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Font.Size">
            <summary>
            Font size.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Font.Smooth">
            <summary>
            Enables or disables font smoothing (default: disabled).
            </summary>
        </member>
        <member name="P:Simplex.Gui.Font.RendererData">
            <summary>
            This should be set by the renderer if it tries to use a font where it's null.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Font.RealSize">
            <summary>
            This is the real font size, after it's been scaled by Renderer.Scale()
            </summary>
        </member>
        <member name="P:Simplex.Gui.Font.FontMetrics">
            <summary>
            Gets the font metrics.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Font.#ctor(Simplex.Gui.Renderer.RendererBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Font"/> class.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Font.#ctor(Simplex.Gui.Renderer.RendererBase,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Font"/> class.
            </summary>
            <param name="renderer">Renderer to use.</param>
            <param name="faceName">Face name.</param>
            <param name="size">Font size.</param>
        </member>
        <member name="M:Simplex.Gui.Font.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Font.Copy">
            <summary>
            Duplicates font data (except renderer data which must be reinitialized).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Simplex.Gui.Font.Create(Simplex.Gui.Renderer.RendererBase,System.String,System.Int32,Simplex.Gui.FontStyle)">
            <summary>
            Create a new font instance. This function uses a font cache to load the font.
            This is preferable method to create a font. User don't need to worry about
            disposing the font.
            </summary>
            <param name="renderer">Renderer to use.</param>
            <param name="faceName">Face name.</param>
            <param name="size">Font size.</param>
            <param name="style">Font style.</param>
            <returns>Font.</returns>
        </member>
        <member name="T:Simplex.Gui.FontMetrics">
            <summary>
            Font metrics.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Renderer.GuiRenderer">
            <summary>
            Demonstrates the GameWindow class.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Renderer.GuiRenderer.Keyboard_KeyDown(OpenTK.Input.KeyboardKeyEventArgs)">
            <summary>
            Occurs when a key is pressed.
            </summary>
            <param name="sender">The KeyboardDevice which generated this event.</param>
            <param name="e">The key that was pressed.</param>
        </member>
        <member name="M:Simplex.Gui.Renderer.GuiRenderer.Init(System.Int32,System.Int32)">
            <summary>
            Setup OpenGL and load resources here.
            </summary>
            <param name="e">Not used.</param>
        </member>
        <member name="M:Simplex.Gui.Renderer.GuiRenderer.Resize(System.Int32,System.Int32)">
            <summary>
            Respond to resize events here.
            </summary>
            <param name="e">Contains information on the new GameWindow size.</param>
            <remarks>There is no need to call the base implementation.</remarks>
        </member>
        <member name="M:Simplex.Gui.Renderer.GuiRenderer.Render">
            <summary>
            Add your game rendering code here.
            </summary>
            <param name="e">Contains timing information.</param>
            <remarks>There is no need to call the base implementation.</remarks>
        </member>
        <member name="M:Simplex.Gui.Renderer.ICacheToTexture.SetupCacheTexture(Simplex.Gui.Control.ControlBase)">
            <summary>
            Called to set the target up for rendering.
            </summary>
            <param name="control">Control to be rendered.</param>
        </member>
        <member name="M:Simplex.Gui.Renderer.ICacheToTexture.FinishCacheTexture(Simplex.Gui.Control.ControlBase)">
            <summary>
            Called when cached rendering is done.
            </summary>
            <param name="control">Control to be rendered.</param>
        </member>
        <member name="M:Simplex.Gui.Renderer.ICacheToTexture.DrawCachedControlTexture(Simplex.Gui.Control.ControlBase)">
            <summary>
            Called when gwen wants to draw the cached version of the control. 
            </summary>
            <param name="control">Control to be rendered.</param>
        </member>
        <member name="M:Simplex.Gui.Renderer.ICacheToTexture.CreateControlCacheTexture(Simplex.Gui.Control.ControlBase)">
            <summary>
            Called to actually create a cached texture. 
            </summary>
            <param name="control">Control to be rendered.</param>
        </member>
        <member name="P:Simplex.Gui.Renderer.OpenTKBase.TextCacheSize">
            <summary>
            Returns number of cached strings in the text cache.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Renderer.OpenTKBase.FlushTextCache">
            <summary>
            Clears the text rendering cache. Make sure to call this if cached strings size becomes too big (check TextCacheSize).
            </summary>
        </member>
        <member name="T:Simplex.Gui.Renderer.RendererBase">
            <summary>
            Base renderer.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Renderer.RendererBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Renderer.RendererBase"/> class.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Renderer.RendererBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Simplex.Gui.Renderer.RendererBase.Begin">
            <summary>
            Starts rendering.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Renderer.RendererBase.End">
            <summary>
            Stops rendering.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Renderer.RendererBase.DrawColor">
            <summary>
            Gets or sets the current drawing color.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Renderer.RendererBase.RenderOffset">
            <summary>
            Rendering offset. No need to touch it usually.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Renderer.RendererBase.ClipRegion">
            <summary>
            Clipping rectangle.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Renderer.RendererBase.ClipRegionVisible">
            <summary>
            Indicates whether the clip region is visible.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Renderer.RendererBase.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a line.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:Simplex.Gui.Renderer.RendererBase.DrawFilledRect(Simplex.Gui.Rectangle)">
            <summary>
            Draws a solid filled rectangle.
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:Simplex.Gui.Renderer.RendererBase.StartClip">
            <summary>
            Starts clipping to the current clipping rectangle.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Renderer.RendererBase.EndClip">
            <summary>
            Stops clipping.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Renderer.RendererBase.LoadTexture(Simplex.Gui.Texture)">
            <summary>
            Loads the specified texture.
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Simplex.Gui.Renderer.RendererBase.LoadTextureRaw(Simplex.Gui.Texture,System.Byte[])">
            <summary>
            Initializes texture from raw pixel data.
            </summary>
            <param name="t">Texture to initialize. Dimensions need to be set.</param>
            <param name="pixelData">Pixel data in RGBA format.</param>
        </member>
        <member name="M:Simplex.Gui.Renderer.RendererBase.LoadTextureStream(Simplex.Gui.Texture,System.IO.Stream)">
            <summary>
            Initializes texture from image file data.
            </summary>
            <param name="t">Texture to initialize.</param>
            <param name="data">Image file as stream.</param>
        </member>
        <member name="M:Simplex.Gui.Renderer.RendererBase.FreeTexture(Simplex.Gui.Texture)">
            <summary>
            Frees the specified texture.
            </summary>
            <param name="t">Texture to free.</param>
        </member>
        <member name="M:Simplex.Gui.Renderer.RendererBase.DrawTexturedRect(Simplex.Gui.Texture,Simplex.Gui.Rectangle,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws textured rectangle.
            </summary>
            <param name="t">Texture to use.</param>
            <param name="targetRect">Rectangle bounds.</param>
            <param name="u1">Texture coordinate u1.</param>
            <param name="v1">Texture coordinate v1.</param>
            <param name="u2">Texture coordinate u2.</param>
            <param name="v2">Texture coordinate v2.</param>
        </member>
        <member name="M:Simplex.Gui.Renderer.RendererBase.DrawMissingImage(Simplex.Gui.Rectangle)">
            <summary>
            Draws "missing image" default texture.
            </summary>
            <param name="rect">Target rectangle.</param>
        </member>
        <member name="P:Simplex.Gui.Renderer.RendererBase.CTT">
            <summary>
            Cache to texture provider.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Renderer.RendererBase.LoadFont(Simplex.Gui.Font)">
            <summary>
            Loads the specified font.
            </summary>
            <param name="font">Font to load.</param>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Simplex.Gui.Renderer.RendererBase.FreeFont(Simplex.Gui.Font)">
            <summary>
            Frees the specified font.
            </summary>
            <param name="font">Font to free.</param>
        </member>
        <member name="M:Simplex.Gui.Renderer.RendererBase.GetFontMetrics(Simplex.Gui.Font)">
            <summary>
            Gets the font metrics.
            </summary>
            <param name="font">Font.</param>
            <returns>The font metrics.</returns>
        </member>
        <member name="M:Simplex.Gui.Renderer.RendererBase.MeasureText(Simplex.Gui.Font,System.String)">
            <summary>
            Returns dimensions of the text using specified font.
            </summary>
            <param name="font">Font to use.</param>
            <param name="text">Text to measure.</param>
            <returns>Width and height of the rendered text.</returns>
        </member>
        <member name="M:Simplex.Gui.Renderer.RendererBase.RenderText(Simplex.Gui.Font,Simplex.Gui.Point,System.String)">
            <summary>
            Renders text using specified font.
            </summary>
            <param name="font">Font to use.</param>
            <param name="position">Top-left corner of the text.</param>
            <param name="text">Text to render.</param>
        </member>
        <member name="M:Simplex.Gui.Renderer.RendererBase.DrawLinedRect(Simplex.Gui.Rectangle)">
            <summary>
            Draws a lined rectangle. Used for keyboard focus overlay.
            </summary>
            <param name="rect">Target rectangle.</param>
        </member>
        <member name="M:Simplex.Gui.Renderer.RendererBase.DrawPixel(System.Int32,System.Int32)">
            <summary>
            Draws a single pixel. Very slow, do not use. :P
            </summary>
            <param name="x">X.</param>
            <param name="y">Y.</param>
        </member>
        <member name="M:Simplex.Gui.Renderer.RendererBase.PixelColor(Simplex.Gui.Texture,System.UInt32,System.UInt32)">
            <summary>
            Gets pixel color of a specified texture. Slow.
            </summary>
            <param name="texture">Texture.</param>
            <param name="x">X.</param>
            <param name="y">Y.</param>
            <returns>Pixel color.</returns>
        </member>
        <member name="M:Simplex.Gui.Renderer.RendererBase.PixelColor(Simplex.Gui.Texture,System.UInt32,System.UInt32,Simplex.Gui.Color)">
            <summary>
            Gets pixel color of a specified texture, returning default if otherwise failed. Slow.
            </summary>
            <param name="texture">Texture.</param>
            <param name="x">X.</param>
            <param name="y">Y.</param>
            <param name="defaultColor">Color to return on failure.</param>
            <returns>Pixel color.</returns>
        </member>
        <member name="M:Simplex.Gui.Renderer.RendererBase.DrawShavedCornerRect(Simplex.Gui.Rectangle,System.Boolean)">
            <summary>
            Draws a round-corner rectangle.
            </summary>
            <param name="rect">Target rectangle.</param>
            <param name="slight"></param>
        </member>
        <member name="M:Simplex.Gui.Renderer.RendererBase.Translate(System.Int32@,System.Int32@)">
            <summary>
            Translates a panel's local drawing coordinate into view space, taking offsets into account.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Simplex.Gui.Renderer.RendererBase.Translate(Simplex.Gui.Point)">
            <summary>
            Translates a panel's local drawing coordinate into view space, taking offsets into account.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Renderer.RendererBase.Translate(Simplex.Gui.Rectangle)">
            <summary>
            Translates a panel's local drawing coordinate into view space, taking offsets into account.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Renderer.RendererBase.AddRenderOffset(Simplex.Gui.Rectangle)">
            <summary>
            Adds a point to the render offset.
            </summary>
            <param name="offset">Point to add.</param>
        </member>
        <member name="M:Simplex.Gui.Renderer.RendererBase.AddClipRegion(Simplex.Gui.Rectangle)">
            <summary>
            Adds a rectangle to the clipping region.
            </summary>
            <param name="rect">Rectangle to add.</param>
        </member>
        <member name="M:Simplex.Gui.Renderer.RendererBase.SetClipRegion(Simplex.Gui.Rectangle)">
            <summary>
            Sets a rectangle to the clipping region.
            </summary>
            <param name="rect">Rectangle to set.</param>
        </member>
        <member name="T:Simplex.Gui.Renderer.TextRenderer">
            <summary>
            Uses System.Drawing for 2d text rendering.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Renderer.TextRenderer.#ctor(System.Int32,System.Int32,Simplex.Gui.Renderer.OpenTKBase)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="width">The width of the backing store in pixels.</param>
            <param name="height">The height of the backing store in pixels.</param>
            <param name="renderer">GWEN renderer.</param>
        </member>
        <member name="M:Simplex.Gui.Renderer.TextRenderer.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,Simplex.Gui.Point,System.Drawing.StringFormat)">
            <summary>
            Draws the specified string to the backing store.
            </summary>
            <param name="text">The <see cref="T:System.String"/> to draw.</param>
            <param name="font">The <see cref="T:System.Drawing.Font"/> that will be used.</param>
            <param name="brush">The <see cref="T:System.Drawing.Brush"/> that will be used.</param>
            <param name="point">The location of the text on the backing store, in 2d pixel coordinates.
            The origin (0, 0) lies at the top-left corner of the backing store.</param>
        </member>
        <member name="T:Simplex.Gui.Input.InputHandler">
            <summary>
            Input handling.
            </summary>
        </member>
        <member name="F:Simplex.Gui.Input.InputHandler.HoveredControl">
            <summary>
            Control currently hovered by mouse.
            </summary>
        </member>
        <member name="F:Simplex.Gui.Input.InputHandler.KeyboardFocus">
            <summary>
            Control that corrently has keyboard focus.
            </summary>
        </member>
        <member name="F:Simplex.Gui.Input.InputHandler.MouseFocus">
            <summary>
            Control that currently has mouse focus.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Input.InputHandler.MaxMouseButtons">
            <summary>
            Maximum number of mouse buttons supported.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Input.InputHandler.DoubleClickSpeed">
            <summary>
            Maximum time in seconds between mouse clicks to be recognized as double click.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Input.InputHandler.KeyRepeatRate">
            <summary>
            Time in seconds between autorepeating of keys.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Input.InputHandler.KeyRepeatDelay">
            <summary>
            Time in seconds before key starts to autorepeat.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Input.InputHandler.IsLeftMouseDown">
            <summary>
            Indicates whether the left mouse button is down.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Input.InputHandler.IsRightMouseDown">
            <summary>
            Indicates whether the right mouse button is down.
            </summary>
        </member>
        <member name="F:Simplex.Gui.Input.InputHandler.MousePosition">
            <summary>
            Current mouse position.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Input.InputHandler.IsShiftDown">
            <summary>
            Indicates whether the shift key is down.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Input.InputHandler.IsControlDown">
            <summary>
            Indicates whether the control key is down.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Input.InputHandler.IsKeyDown(Simplex.Gui.Key)">
            <summary>
            Checks if the given key is pressed.
            </summary>
            <param name="key">Key to check.</param>
            <returns>True if the key is down.</returns>
        </member>
        <member name="M:Simplex.Gui.Input.InputHandler.DoSpecialKeys(Simplex.Gui.Control.ControlBase,System.Char)">
            <summary>
            Handles copy, paste etc.
            </summary>
            <param name="canvas">Canvas.</param>
            <param name="chr">Input character.</param>
            <returns>True if the key was handled.</returns>
        </member>
        <member name="M:Simplex.Gui.Input.InputHandler.HandleAccelerator(Simplex.Gui.Control.ControlBase,System.Char)">
            <summary>
            Handles accelerator input.
            </summary>
            <param name="canvas">Canvas.</param>
            <param name="chr">Input character.</param>
            <returns>True if the key was handled.</returns>
        </member>
        <member name="M:Simplex.Gui.Input.InputHandler.OnCanvasThink(Simplex.Gui.Control.ControlBase)">
            <summary>
            Handles focus updating and key autorepeats.
            </summary>
            <param name="control">Unused.</param>
        </member>
        <member name="M:Simplex.Gui.Input.InputHandler.OnMouseMoved(Simplex.Gui.Control.ControlBase,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Mouse moved handler.
            </summary>
            <param name="canvas">Canvas.</param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="dx"></param>
            <param name="dy"></param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Simplex.Gui.Input.InputHandler.OnMouseClicked(Simplex.Gui.Control.ControlBase,System.Int32,System.Boolean)">
            <summary>
            Mouse click handler.
            </summary>
            <param name="canvas">Canvas.</param>
            <param name="mouseButton">Mouse button number.</param>
            <param name="down">Specifies if the button is down.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Simplex.Gui.Input.InputHandler.OnKeyEvent(Simplex.Gui.Control.ControlBase,Simplex.Gui.Key,System.Boolean)">
            <summary>
            Key handler.
            </summary>
            <param name="canvas">Canvas.</param>
            <param name="key">Key.</param>
            <param name="down">True if the key is down.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Simplex.Gui.Input.InputSystem.TranslateKeyCode(OpenTK.Input.Key)">
            <summary>
            Translates control key's OpenTK key code to GWEN's code.
            </summary>
            <param name="key">OpenTK key code.</param>
            <returns>GWEN key code.</returns>
        </member>
        <member name="M:Simplex.Gui.Input.InputSystem.TranslateChar(OpenTK.Input.Key)">
            <summary>
            Translates alphanumeric OpenTK key code to character value.
            </summary>
            <param name="key">OpenTK key code.</param>
            <returns>Translated character.</returns>
        </member>
        <member name="T:Simplex.Gui.Input.KeyData">
            <summary>
            Keyboard state.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Input.OpenTK.TranslateKeyCode(OpenTK.Input.Key)">
            <summary>
            Translates control key's OpenTK key code to GWEN's code.
            </summary>
            <param name="key">OpenTK key code.</param>
            <returns>GWEN key code.</returns>
        </member>
        <member name="M:Simplex.Gui.Input.OpenTK.TranslateChar(OpenTK.Input.Key)">
            <summary>
            Translates alphanumeric OpenTK key code to character value.
            </summary>
            <param name="key">OpenTK key code.</param>
            <returns>Translated character.</returns>
        </member>
        <member name="T:Simplex.Gui.Key">
            <summary>
            Key constants.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Margin">
            <summary>
            Represents outer spacing.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Padding">
            <summary>
            Represents inner spacing.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Skin.SkinBase">
            <summary>
            Base skin.
            </summary>
        </member>
        <member name="F:Simplex.Gui.Skin.SkinBase.Colors">
            <summary>
            Colors of various UI elements.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Skin.SkinBase.DefaultFont">
            <summary>
            Default font to use when rendering text if none specified.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Skin.SkinBase.BaseUnit">
            <summary>
            Base measurement unit based on default font size used in various controls where absolute scale is necessary.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Skin.SkinBase.Renderer">
            <summary>
            Renderer used.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Skin.SkinBase.#ctor(Simplex.Gui.Renderer.RendererBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Skin.SkinBase"/> class.
            </summary>
            <param name="renderer">Renderer to use.</param>
        </member>
        <member name="M:Simplex.Gui.Skin.SkinBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Skin.SkinBase.ReleaseFont(Simplex.Gui.Font)">
            <summary>
            Releases the specified font.
            </summary>
            <param name="font">Font to release.</param>
        </member>
        <member name="M:Simplex.Gui.Skin.SkinBase.SetDefaultFont(System.String,System.Int32)">
            <summary>
            Sets the default text font.
            </summary>
            <param name="faceName">Font name. Meaning can vary depending on the renderer.</param>
            <param name="size">Font size.</param>
        </member>
        <member name="T:Simplex.Gui.Skin.SkinColors">
            <summary>
            UI colors used by skins.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Skin.TexturedBase">
            <summary>
            Base textured skin.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Skin.TexturedBase.#ctor(Simplex.Gui.Renderer.RendererBase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Skin.TexturedBase"/> class.
            </summary>
            <param name="renderer">Renderer to use.</param>
            <param name="textureName">Name of the skin texture map.</param>
        </member>
        <member name="M:Simplex.Gui.Skin.TexturedBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Skin.Texturing.Bordered">
            <summary>
            3x3 texture grid.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Skin.Texturing.Single">
            <summary>
            Single textured element.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Texture">
            <summary>
            Represents a texture.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Texture.Name">
            <summary>
            Texture name. Usually file name, but exact meaning depends on renderer.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Texture.RendererData">
            <summary>
            Renderer data.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Texture.Failed">
            <summary>
            Indicates that the texture failed to load.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Texture.Width">
            <summary>
            Texture width.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Texture.Height">
            <summary>
            Texture height.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Texture.#ctor(Simplex.Gui.Renderer.RendererBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Texture"/> class.
            </summary>
            <param name="renderer">Renderer to use.</param>
        </member>
        <member name="M:Simplex.Gui.Texture.Load(System.String)">
            <summary>
            Loads the specified texture.
            </summary>
            <param name="name">Texture name.</param>
        </member>
        <member name="M:Simplex.Gui.Texture.LoadRaw(System.Int32,System.Int32,System.Byte[])">
            <summary>
            Initializes the texture from raw pixel data.
            </summary>
            <param name="width">Texture width.</param>
            <param name="height">Texture height.</param>
            <param name="pixelData">Color array in RGBA format.</param>
        </member>
        <member name="M:Simplex.Gui.Texture.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Timer">
            <summary>
            Render based timer.
            </summary>
            <remarks>
            This is not very accurate timer because it depends on render events.
            </remarks>
        </member>
        <member name="E:Simplex.Gui.Timer.Elapsed">
            <summary>
            Invoked when the timeout occurs.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Timer.Interval">
            <summary>
            Timer interval in milliseconds.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Timer.IsOneTime">
            <summary>
            If true, timer is disabled when timeout occurs.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Timer.IsEnabled">
            <summary>
            Is timer enabled.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Timer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simplex.Gui.Timer"/> class.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Timer.Start">
            <summary>
            Start the timer.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Timer.Stop">
            <summary>
            Stop the timer.
            </summary>
        </member>
        <member name="T:Simplex.Gui.ToolTip">
            <summary>
            Tooltip handling.
            </summary>
        </member>
        <member name="M:Simplex.Gui.ToolTip.Enable(Simplex.Gui.Control.ControlBase)">
            <summary>
            Enables tooltip display for the specified control.
            </summary>
            <param name="control">Target control.</param>
        </member>
        <member name="M:Simplex.Gui.ToolTip.Disable(Simplex.Gui.Control.ControlBase)">
            <summary>
            Disables tooltip display for the specified control.
            </summary>
            <param name="control">Target control.</param>
        </member>
        <member name="M:Simplex.Gui.ToolTip.ControlDeleted(Simplex.Gui.Control.ControlBase)">
            <summary>
            Disables tooltip display for the specified control.
            </summary>
            <param name="control">Target control.</param>
        </member>
        <member name="M:Simplex.Gui.ToolTip.RenderToolTip(Simplex.Gui.Skin.SkinBase)">
            <summary>
            Renders the currently visible tooltip.
            </summary>
            <param name="skin"></param>
        </member>
        <member name="T:Simplex.Gui.Util">
            <summary>
            Misc utility functions.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Util.SplitAndKeep(System.String,System.String)">
            <summary>
            Splits a string but keeps the separators intact.
            </summary>
            <param name="text">String to split.</param>
            <param name="separators">Separator characters.</param>
            <returns>Split strings.</returns>
        </member>
        <member name="T:Simplex.Gui.Xml.XmlPropertyAttribute">
            <summary>
            Attribute to indicate that a property is usable from XML.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Xml.XmlEventAttribute">
            <summary>
            Attribute to indicate that a event is usable from XML.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Xml.XmlControlAttribute">
            <summary>
            Attribute to indicate that a control is able to be created from XML.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Xml.XmlControlAttribute.ElementName">
            <summary>
            Name of XML element. Default is a class name.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Xml.XmlControlAttribute.CustomHandler">
            <summary>
            Function name of the custom handler for the element creation.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Xml.Component">
            <summary>
            Base class for all components. A component is a group of Gwen controls that handles user input of them.
            Component can be (and should be) created using XML and that makes it easier to use and maintain than creating a new
            Gwen control.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Xml.Component.View">
            <summary>
            Get the view of the component. View is a group of child controls or components that implements
            the visual part of the component.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Xml.Component.Register``1(System.String,System.Object[])">
            <summary>
            Register a component. All components must be registerd before using them.
            </summary>
            <typeparam name="T">Type of component.</typeparam>
            <param name="name">Optional name for component. By default the name is component type name.</param>
            <param name="data">Optional data used when creating a component instance.</param>
        </member>
        <member name="M:Simplex.Gui.Xml.Component.Unregister``1(System.String)">
            <summary>
            Remove component registration. After this the component is not usable anymore from XML.
            </summary>
            <typeparam name="T">Type of component.</typeparam>
            <param name="name">Optional name for component. By default the name is component type name.</param>
        </member>
        <member name="M:Simplex.Gui.Xml.Component.Create``1(Simplex.Gui.Control.ControlBase,System.Object[])">
            <summary>
            Create a new instance of component. Component must be created with Create function, not calling constructor.
            </summary>
            <typeparam name="T">Type of component.</typeparam>
            <param name="parent">Parent Gwen control of the component.</param>
            <param name="data">Optional data for a component constructor.</param>
            <returns>Created instance of the component.</returns>
        </member>
        <member name="M:Simplex.Gui.Xml.Component.Create(System.Type,Simplex.Gui.Control.ControlBase,System.Object[])">
            <summary>
            Create a new instance of component by type. Component must be created with Create function, not calling constructor.
            </summary>
            <param name="type">Type of component.</param>
            <param name="parent">Parent Gwen control of the component.</param>
            <param name="data">Optional data for a component constructor.</param>
            <returns>Created instance of the component.</returns>
        </member>
        <member name="M:Simplex.Gui.Xml.Component.Create(System.String,Simplex.Gui.Control.ControlBase,System.Object[])">
            <summary>
            Create a new instance of component by name. Component must be created with Create function, not calling constructor.
            </summary>
            <param name="name">Name of component.</param>
            <param name="parent">Parent Gwen control of the component.</param>
            <param name="data">Optional data for a component constructor. If the component registration contains also data, that data is used first, then this optional data.</param>
            <returns>Created instance of the component.</returns>
        </member>
        <member name="M:Simplex.Gui.Xml.Component.#ctor(Simplex.Gui.Control.ControlBase,Simplex.Gui.Control.ControlBase)">
            <summary>
            Constructor for implementing the component from a Gwen control.
            </summary>
            <param name="parent">Parent Gwen control of the component.</param>
            <param name="view">Gwen control that will be a view of the copmponent.</param>
        </member>
        <member name="M:Simplex.Gui.Xml.Component.#ctor(Simplex.Gui.Control.ControlBase,Simplex.Gui.Xml.IXmlSource)">
            <summary>
            Constructor for implementing the component from XML.
            </summary>
            <param name="parent">Parent Gwen control of the component.</param>
            <param name="xmlSource">XML to be a view of the component.</param>
        </member>
        <member name="M:Simplex.Gui.Xml.Component.OnCreated">
            <summary>
            Called when the view of the component is created. This is the right place to do initialization of the component
            because Gwen controls are created at this point.
            </summary>
            <remarks>No need to call the base implementation.</remarks>
        </member>
        <member name="M:Simplex.Gui.Xml.Component.OnChildAdded(Simplex.Gui.Control.ControlBase)">
            <summary>
            This function is called for every child control of the component. Child control in this context is a control
            that is defined in the XML as a child element of the component, not child controls that implement the component.
            </summary>
            <param name="child">Child control.</param>
            <remarks>No need to call the base implementation.</remarks>
        </member>
        <member name="M:Simplex.Gui.Xml.Component.GetControl``1(System.String)">
            <summary>
            Get a child control or component of this component.
            </summary>
            <typeparam name="T">Type of the control or component.</typeparam>
            <param name="name">Name.</param>
            <returns>Control or component.</returns>
        </member>
        <member name="M:Simplex.Gui.Xml.Component.GetControl(System.String)">
            <summary>
            Get a child control or component of this component.
            </summary>
            <param name="name">Name.</param>
            <returns>Control or component.</returns>
        </member>
        <member name="M:Simplex.Gui.Xml.Component.HandleEvent(System.String,System.String,Simplex.Gui.Control.ControlBase,System.EventArgs)">
            <summary>
            Override this function if you want to handle all XML based events in the same function.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="handlerName">Element handler defined in the XML.</param>
            <param name="sender">Event sender control.</param>
            <param name="args">Event arguments.</param>
            <returns>True if the event was handled, false otherwise.</returns>
            <remarks>No need to call the base implementation.</remarks>
        </member>
        <member name="M:Simplex.Gui.Xml.Component.GetValueType(System.String,System.Type@)">
            <summary>
            Get the type of the property value. Override this function if you want to implement all properties in the same function.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="type">Type of the property value. Return null if you want to handle string values from XML attributes by yourself without conversion.</param>
            <returns>True if the property is a valid property, false otherwise.</returns>
            <remarks>No need to call the base implementation.</remarks>
        </member>
        <member name="M:Simplex.Gui.Xml.Component.GetValue(System.String,System.Object@)">
            <summary>
            Get the value of the property. Override this function if you want to implement all property getters in the same function.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="value">Value of the property.</param>
            <returns>True if the property value was succesfully evaluated, false otherwise.</returns>
            <remarks>No need to call the base implementation.</remarks>
        </member>
        <member name="M:Simplex.Gui.Xml.Component.SetValue(System.String,System.Object)">
            <summary>
            Set the value of the property. Override this function if you want to implement all property setters in the same function.
            This is also used in the XML parser to set the property value if no dedicated property was found.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="value">Value of the property.</param>
            <returns>True if the property value was succesfully set, false otherwise.</returns>
            <remarks>No need to call the base implementation. If you implement this, implement also <see cref="T:System.ValueType"/>.</remarks>
        </member>
        <member name="T:Simplex.Gui.Xml.XmlEventHandler`1">
            <summary>
            XML based event handler.
            </summary>
            <typeparam name="T">Type of event arguments.</typeparam>
        </member>
        <member name="T:Simplex.Gui.Xml.Parser">
            <summary>
            XML parser for creating controls and components using XML.
            </summary>
        </member>
        <member name="P:Simplex.Gui.Xml.Parser.Name">
            <summary>
            Current XML node name.
            </summary>
        </member>
        <member name="M:Simplex.Gui.Xml.Parser.RegisterElement(System.String,System.Type,Simplex.Gui.Xml.ElementHandler)">
            <summary>
            Register a XML element. All XML elements must be registered before usage. 
            </summary>
            <param name="name">Name of the element.</param>
            <param name="type">Type of the control or component.</param>
            <param name="handler">Handler function for creating the control or component.</param>
            <returns>True if registered successfully or false is already registered.</returns>
        </member>
        <member name="M:Simplex.Gui.Xml.Parser.UnregisterElement(System.String)">
            <summary>
            Remove a XML element registration. After this the element is not usable anymore.
            </summary>
            <param name="name">Name of the element.</param>
            <returns>True if unregistered successfully.</returns>
        </member>
        <member name="M:Simplex.Gui.Xml.Parser.RegisterAttributeValueConverter(System.Type,Simplex.Gui.Xml.AttributeValueConverter)">
            <summary>
            Register an attribute value converter for a property value type. All types of properties must be registered
            to be able to be created using XML.
            </summary>
            <param name="type">Value type.</param>
            <param name="converter">Converter function.</param>
        </member>
        <member name="M:Simplex.Gui.Xml.Parser.RegisterEventHandlerConverter(System.Type,Simplex.Gui.Xml.EventHandlerConverter)">
            <summary>
            Register an event argument converter. All types of event arguments must be registered before usage.
            </summary>
            <param name="type">Event argument type.</param>
            <param name="converter">Converter function.</param>
        </member>
        <member name="M:Simplex.Gui.Xml.Parser.#ctor(System.IO.Stream)">
            <summary>
            Parser constructor.
            </summary>
            <param name="stream">XML stream.</param>
        </member>
        <member name="M:Simplex.Gui.Xml.Parser.Parse(Simplex.Gui.Control.ControlBase)">
            <summary>
            Parse XML.
            </summary>
            <param name="parent">Parent control.</param>
            <returns>XML root control.</returns>
        </member>
        <member name="M:Simplex.Gui.Xml.Parser.ParseElement(Simplex.Gui.Control.ControlBase)">
            <summary>
            Parse element and call it's handler.
            </summary>
            <param name="parent">Parent control.</param>
            <returns>Control.</returns>
        </member>
        <member name="M:Simplex.Gui.Xml.Parser.ParseElement``1(Simplex.Gui.Control.ControlBase)">
            <summary>
            Parse typed element and call it's handler.
            </summary>
            <typeparam name="T">Control type to be created.</typeparam>
            <param name="parent">Parent control.</param>
            <returns>Control.</returns>
        </member>
        <member name="M:Simplex.Gui.Xml.Parser.ParseAttributes(Simplex.Gui.Control.ControlBase)">
            <summary>
            Parse attributes.
            </summary>
            <param name="element">Control.</param>
        </member>
        <member name="M:Simplex.Gui.Xml.Parser.MoveToContent">
            <summary>
            Check that the current element contains a content and moves to it.
            </summary>
            <returns>True if the element contains a content. False otherwise.</returns>
        </member>
        <member name="M:Simplex.Gui.Xml.Parser.ParseContainerContent(Simplex.Gui.Control.ControlBase)">
            <summary>
            Parse content of the container element.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Simplex.Gui.Xml.Parser.NextElement">
            <summary>
            Enumerate content of the container element.
            </summary>
            <returns>Element name.</returns>
        </member>
        <member name="M:Simplex.Gui.Xml.Parser.GetAttribute(System.String)">
            <summary>
            Get attribute value.
            </summary>
            <param name="attribute">Attribute name.</param>
            <returns>Attribute value. Null if an empty attribute or attribute not found.</returns>
        </member>
        <member name="M:Simplex.Gui.Xml.Parser.ScanControls(System.Reflection.Assembly)">
            <summary>
            Scan an assembly to find all controls that can be created using XML.
            </summary>
            <param name="assembly">Assembly.</param>
        </member>
        <member name="M:Simplex.Gui.Xml.Parser.GetElements">
            <summary>
            Get list of controls that can be created using XML.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Simplex.Gui.Xml.Parser.GetAttributes(System.String)">
            <summary>
            Get list of properties that can be set using XML.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:Simplex.Gui.Xml.IXmlSource">
            <summary>
            Implement this in a class that can be used as a source for XML parser.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Xml.XmlStringSource">
            <summary>
            XML source as a string.
            </summary>
        </member>
        <member name="T:Simplex.Gui.Xml.XmlFileSource">
            <summary>
            XML source as a file.
            </summary>
        </member>
        <member name="T:Simplex.Loaders.FontLoader">
            <summary>
            Loader class for loading ttf fonts to be used with nanovg
            </summary>
        </member>
        <member name="M:Simplex.Loaders.FontLoader.LoadDefaults">
            <summary>
            loads the defaultfont
            </summary>
        </member>
        <member name="T:Simplex.Loaders.GuiLoader">
            <summary>
            class for loading gui from xaml files
            </summary>
        </member>
        <member name="M:Simplex.Loaders.GuiLoader.LoadGui(System.String)">
            <summary>
            loads a guiwindow from a xaml file
            </summary>
            <param name="filePath">the path to the file</param>
        </member>
        <member name="T:Simplex.Loaders.MeshLoader">
            <summary>
            class for loading gltf models
            </summary>
        </member>
        <member name="M:Simplex.Loaders.MeshLoader.LoadMesh(System.String)">
            <summary>
            loads a mesh from a gltf file
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Simplex.Loaders.ResourceLoader">
            <summary>
            class for handling loading of resources
            ToDo: implement
            </summary>
        </member>
        <member name="T:Simplex.Loaders.TextureLoader">
            <summary>
            class for loading textures via opentk
            </summary>
        </member>
        <member name="P:Simplex.Loaders.TextureLoader.Instance">
            <summary>
            the instance of the textureloader
            ToDo: move to ResourceLoader
            </summary>
        </member>
        <member name="M:Simplex.Loaders.TextureLoader.LoadTexture2D(System.String)">
            <summary>
            loads a texture from a given filepath
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Simplex.Managers.InputManager">
            <summary>
            class for handlign input
            may not be needed,we'll see
            </summary>
        </member>
        <member name="T:Simplex.Managers.ResourceManager">
            <summary>
            class for managing resources,
            should not be mistaken with resourceloader that only handles the loading
            ToDo: implement
            </summary>
        </member>
        <member name="T:Simplex.Platform.IPlatform">
            <summary>
            Platform specific functions.
            </summary>
        </member>
        <member name="M:Simplex.Platform.IPlatform.GetClipboardText">
            <summary>
            Gets text from clipboard.
            </summary>
            <returns>Clipboard text.</returns>
        </member>
        <member name="M:Simplex.Platform.IPlatform.SetClipboardText(System.String)">
            <summary>
            Sets the clipboard text.
            </summary>
            <param name="text">Text to set.</param>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Simplex.Platform.IPlatform.GetTimeInSeconds">
            <summary>
            Gets elapsed time. Initialization time is platform specific.
            </summary>
            <returns>Time interval in seconds.</returns>
        </member>
        <member name="M:Simplex.Platform.IPlatform.SetCursor(Simplex.Gui.Cursor)">
            <summary>
            Changes the mouse cursor.
            </summary>
            <param name="cursor">Cursor type.</param>
        </member>
        <member name="M:Simplex.Platform.IPlatform.GetSpecialFolders">
            <summary>
            Get special folders of the system.
            </summary>
            <returns>List of folders.</returns>
        </member>
        <member name="M:Simplex.Platform.PlatformBase.Init(Simplex.Platform.IPlatform)">
            <summary>
            Set the current platform.
            </summary>
            <param name="platform">Platform.</param>
        </member>
        <member name="M:Simplex.Platform.PlatformBase.GetClipboardText">
            <summary>
            Gets text from clipboard.
            </summary>
            <returns>Clipboard text.</returns>
        </member>
        <member name="M:Simplex.Platform.PlatformBase.SetClipboardText(System.String)">
            <summary>
            Sets the clipboard text.
            </summary>
            <param name="text">Text to set.</param>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Simplex.Platform.PlatformBase.GetTimeInSeconds">
            <summary>
            Gets elapsed time since this class was initalized.
            </summary>
            <returns>Time interval in seconds.</returns>
        </member>
        <member name="M:Simplex.Platform.PlatformBase.SetCursor(Simplex.Gui.Cursor)">
            <summary>
            Changes the mouse cursor.
            </summary>
            <param name="cursor">Cursor type.</param>
        </member>
        <member name="M:Simplex.Platform.PlatformBase.GetSpecialFolders">
            <summary>
            Get special folders of the system.
            </summary>
            <returns>List of folders.</returns>
        </member>
        <member name="M:Simplex.Platform.NetCore.GetClipboardText">
            <summary>
            Gets text from clipboard.
            </summary>
            <returns>Clipboard text.</returns>
        </member>
        <member name="M:Simplex.Platform.NetCore.SetClipboardText(System.String)">
            <summary>
            Sets the clipboard text.
            </summary>
            <param name="text">Text to set.</param>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Simplex.Platform.NetCore.GetTimeInSeconds">
            <summary>
            Gets elapsed time since this class was initalized.
            </summary>
            <returns>Time interval in seconds.</returns>
        </member>
        <member name="M:Simplex.Platform.NetCore.SetCursor(Simplex.Gui.Cursor)">
            <summary>
            Changes the mouse cursor.
            </summary>
            <param name="cursor">Cursor type.</param>
        </member>
        <member name="M:Simplex.Platform.NetCore.GetSpecialFolders">
            <summary>
            Get special folders of the system.
            </summary>
            <returns>List of folders.</returns>
        </member>
        <member name="T:Simplex.Rendering.PbrMaterial">
            <summary>
            basic class for pbr material
            tries to be compatible with gltf materials
            </summary>
        </member>
        <member name="P:Simplex.Rendering.PbrMaterial.Albedo">
            <summary>
            the albedo texure
            </summary>
        </member>
        <member name="P:Simplex.Rendering.PbrMaterial.BasecolorFactor">
            <summary>
            the basecolor factor
            </summary>
        </member>
        <member name="P:Simplex.Rendering.PbrMaterial.EmissiveFactor">
            <summary>
            the emissive factor
            </summary>
        </member>
        <member name="P:Simplex.Rendering.PbrMaterial.EmissiveMap">
            <summary>
            the emissive texture
            </summary>
        </member>
        <member name="P:Simplex.Rendering.PbrMaterial.Metalicness">
            <summary>
            the metallic factor
            </summary>
        </member>
        <member name="P:Simplex.Rendering.PbrMaterial.MetalTexture">
            <summary>
            the metallic texture
            </summary>
        </member>
        <member name="P:Simplex.Rendering.PbrMaterial.NormalFactor">
            <summary>
            the normal factor
            </summary>
        </member>
        <member name="P:Simplex.Rendering.PbrMaterial.NormalMap">
            <summary>
            the normalmap texture
            </summary>
        </member>
        <member name="P:Simplex.Rendering.PbrMaterial.Roughness">
            <summary>
            the roughness factor
            </summary>
        </member>
        <member name="P:Simplex.Rendering.PbrMaterial.RoughnessTexture">
            <summary>
            the roughness texture
            </summary>
        </member>
        <member name="P:Simplex.Rendering.PbrMaterial.SsaoMap">
            <summary>
            the ssao texture
            </summary>
        </member>
        <member name="T:Simplex.Rendering.Mesh">
            <summary>
            base class for mesh information
            </summary>
        </member>
        <member name="T:Simplex.Rendering.PbrShaderProgram">
            <summary>
            Basic ShaderProgram for pbr based rendering 
            </summary>
        </member>
        <member name="T:Simplex.Rendering.SXRenderer">
            <summary>
            main class for rendering a 3D scene...I guess
            </summary>
        </member>
        <member name="M:Simplex.Rendering.SXRenderer.Render(Simplex.Scene.Scene3D)">
            <summary>
            renders the scene
            </summary>
            <param name="scene">the scene to be rendered</param>
        </member>
        <member name="T:Simplex.Rendering.SXProgramFactory">
            <summary>
            Contains methods to automatically initialize program objects.
            </summary>
        </member>
        <member name="P:Simplex.Rendering.SXProgramFactory.BasePath">
            <summary>
            The base path used when looking for shader files.<br/>
            Default is: Data/Shaders/
            </summary>
        </member>
        <member name="P:Simplex.Rendering.SXProgramFactory.Extension">
            <summary>
            Specifies the default extension appended to effect names.<br/>
            Default is: glsl
            </summary>
        </member>
        <member name="M:Simplex.Rendering.SXProgramFactory.Create``1">
            <summary>
            Initializes a program object using the shader sources tagged to the type with <see cref="T:ObjectTK.Shaders.Sources.ShaderSourceAttribute"/>.
            </summary>
            <typeparam name="T">Specifies the program type to create.</typeparam>
            <returns>A compiled and linked program.</returns>
        </member>
        <member name="M:Simplex.Rendering.SXProgramFactory.GetShaderSource(System.String,System.Collections.Generic.List{ObjectTK.Shaders.Effect.Section},OpenTK.Graphics.OpenGL.ShaderType)">
            <summary>
            Load shader source file(s).<br/>
            Supports multiple source files via "#include xx" directives and corrects the line numbering by using the glsl standard #line directive.
            </summary>
            <param name="effectKey">Specifies the effect key to load.</param>
            <param name="included">Holds the effectKeys of all shaders already loaded to prevent multiple inclusions.</param>
            <param name="shaderType"></param>
            <returns>The fully assembled shader source.</returns>
        </member>
        <member name="T:Simplex.Scene.CameraTypes">
            <summary>
            Different types of Camera
            </summary>
        </member>
        <member name="F:Simplex.Scene.CameraTypes.Orthographic">
            <summary>
            camera shows scene in ortographic mode
            </summary>
        </member>
        <member name="F:Simplex.Scene.CameraTypes.Perspective">
            <summary>
            camera shows scene in perspective mode
            </summary>
        </member>
        <member name="T:Simplex.Scene.Camera">
            <summary>
            base class for camera implementation
            </summary>
        </member>
        <member name="F:Simplex.Scene.Camera.cameraType">
            <summary>
            the type of view
            </summary>
        </member>
        <member name="M:Simplex.Scene.Camera.onTranslate">
            <summary>
            called when the postion changed
            view matrix gets precalculated here
            </summary>
        </member>
        <member name="M:Simplex.Scene.Camera.getProjectionMatrix">
            <summary>
            returns the projection matrix based on the default window
            </summary>
            <returns></returns>
        </member>
        <member name="M:Simplex.Scene.Camera.LookAt(System.Numerics.Vector3@)">
            <summary>
            lets the camera rotate to look at a specific position
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:Simplex.Scene.Scene3D">
            <summary>
            main class for a 3d scene
            </summary>
        </member>
        <member name="T:Simplex.Scene.SceneNode">
            <summary>
            Base class for a node in the 3D Scene
            </summary>
        </member>
        <member name="M:Simplex.Scene.SceneNode.#ctor">
            <summary>
            default constructor,when inheriting override the oncreate function for easier handling
            </summary>
        </member>
        <member name="M:Simplex.Scene.SceneNode.Finalize">
            <summary>
            calls the onDestroy method
            </summary>
        </member>
        <member name="M:Simplex.Scene.SceneNode.TreeEntered(Simplex.Scene.SceneNode)">
            <summary>
            gets called from the parent node when the node is added
            </summary>
            <param name="parent">the parent scene node</param>
        </member>
        <member name="M:Simplex.Scene.SceneNode.onCreate">
            <summary>
            gets called from the constructor when the object is created
            </summary>
        </member>
        <member name="M:Simplex.Scene.SceneNode.onDestroy">
            <summary>
            gets called from the destructor
            </summary>
        </member>
        <member name="M:Simplex.Scene.SceneNode.onTick(System.Single)">
            <summary>
            gets called every engine tick
            </summary>
            <param name="delta">the time in milliseconds since the last frame</param>
        </member>
        <member name="M:Simplex.Scene.SceneNode.onTreeEntered">
            <summary>
            gets called when the node is added to another node
            </summary>
        </member>
        <member name="M:Simplex.Scene.SceneNode.onTreeExited">
            <summary>
            gets called when it gets removed from the parent
            </summary>
        </member>
        <member name="M:Simplex.Scene.SceneNode.onTreeMoved(Simplex.Scene.SceneNode,Simplex.Scene.SceneNode)">
            <summary>
            gets called when the parent node changed
            </summary>
            <param name="oldParent"></param>
            <param name="newParent"></param>
        </member>
        <member name="M:Simplex.Scene.SceneNode.AddChild(Simplex.Scene.SceneNode)">
            <summary>
            adds a childnode
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:Simplex.Scene.SceneNode.FindChild(System.Guid)">
            <summary>
            finds a child node by its guid
            </summary>
            <param name="guid">guid of the childnode</param>
            <returns>the childnode,null if non found</returns>
        </member>
        <member name="M:Simplex.Scene.SceneNode.FindChild(System.String,System.Boolean)">
            <summary>
            tries to find a child by its name
            </summary>
            <param name="name">the name of the node</param>
            <returns>the node if found,else null</returns>
        </member>
        <member name="M:Simplex.Scene.SceneNode.GetChildren">
            <summary>
            returns thechildren of this node as array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Simplex.Scene.SceneNode.TreeExited">
            <summary>
            gets called when it gets removed from the parent
            </summary>
        </member>
        <member name="M:Simplex.Scene.SceneNode.TreeMoved(Simplex.Scene.SceneNode)">
            <summary>
            gets called when the parent node changed
            </summary>
            <param name="newParent"></param>
        </member>
        <member name="T:Simplex.Scene.Transformation">
            <summary>
            class for holding common 3D Transformation
            </summary>
        </member>
        <member name="T:Simplex.Util.SimplexColor">
            <summary>
            a sadly needed wrapper for easier handling colors in both gui and 3d
            </summary>
        </member>
        <member name="M:Simplex.Util.SimplexColor.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Simplex.Util.SimplexColor.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            common constructor with parameters, value range 0-255
            </summary>
            <param name="r">red</param>
            <param name="g">green</param>
            <param name="b">blue</param>
            <param name="a">alpha</param>
        </member>
        <member name="M:Simplex.Util.SimplexColor.#ctor(OpenTK.Color)">
            <summary>
            coopy constructor for use with opentk color
            </summary>
            <param name="color"></param>
        </member>
        <member name="P:Simplex.Util.SimplexColor.A">
            <summary>
            the alpha value 0-255
            </summary>
        </member>
        <member name="P:Simplex.Util.SimplexColor.B">
            <summary>
            the blue value 0-255
            </summary>
        </member>
        <member name="P:Simplex.Util.SimplexColor.G">
            <summary>
            the green value 0-255
            </summary>
        </member>
        <member name="P:Simplex.Util.SimplexColor.R">
            <summary>
            the red value 0-255
            </summary>
        </member>
        <member name="M:Simplex.Util.SimplexColor.op_Implicit(Simplex.Util.SimplexColor)~OpenTK.Color">
            <summary>
            implicit cast to opentk color
            </summary>
            <param name="sc"></param>
        </member>
        <member name="M:Simplex.Util.SimplexColor.op_Implicit(OpenTK.Color)~Simplex.Util.SimplexColor">
            <summary>
            implicit cast to simplexcolor
            </summary>
            <param name="sc"></param>
        </member>
        <member name="T:Simplex.Util.SimplexColorConverter">
            <summary>
            color converter class for use in xaml
            </summary>
        </member>
        <member name="M:Simplex.Util.SimplexColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            just converting from string by now
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Simplex.Util.SimplexColorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            just converting to string by now
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Simplex.Util.SimplexColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            just converting from string by now
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Simplex.Util.SimplexColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            just converting to string by now
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="T:Simplex.Util.Logger">
            <summary>
            wrapper for log4net
            </summary>
        </member>
        <member name="F:Simplex.Util.Logger.Default">
            <summary>
            the logger for default logs
            </summary>
        </member>
        <member name="T:Simplex.Windowing.ApplicationWindow">
            <summary>
            implementation from opentks native window
            every window holds its own 3d scene and guirenderer
            handles input
            </summary>
        </member>
        <member name="M:Simplex.Windowing.ApplicationWindow.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            creates window with given parameters
            defaults to windowed mode
            </summary>
            <param name="width">the widht of the window</param>
            <param name="height">the height of the window</param>
            <param name="title">the window title</param>
        </member>
        <member name="P:Simplex.Windowing.ApplicationWindow.GuiRender">
            <summary>
            the main gui renderer
            </summary>
        </member>
        <member name="P:Simplex.Windowing.ApplicationWindow.Scene">
            <summary>
            the main scene
            </summary>
        </member>
        <member name="P:Simplex.Windowing.ApplicationWindow.Renderer">
            <summary>
            the created nanovg context that can be used for drawing
            </summary>
        </member>
        <member name="M:Simplex.Windowing.ApplicationWindow.OnMouseDown(OpenTK.Input.MouseButtonEventArgs)">
            <summary>
            base override,forwards to gui
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Simplex.Windowing.ApplicationWindow.OnMouseEnter(System.EventArgs)">
            <summary>
            base override,forwards to gui
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Simplex.Windowing.ApplicationWindow.OnMouseLeave(System.EventArgs)">
            <summary>
            base override,forwards to gui
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Simplex.Windowing.ApplicationWindow.OnMouseMove(OpenTK.Input.MouseMoveEventArgs)">
            <summary>
            base override, forwards to gui
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Simplex.Windowing.ApplicationWindow.OnMouseUp(OpenTK.Input.MouseButtonEventArgs)">
            <summary>
            base override,forwards to gui
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Simplex.Windowing.ApplicationWindow.OnMouseWheel(OpenTK.Input.MouseWheelEventArgs)">
            <summary>
            base override,forwards to gui
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Simplex.Windowing.ApplicationWindow.OnResize(System.EventArgs)">
            <summary>
            base override,forwards to gui and resizes viewport
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Simplex.Windowing.ApplicationWindow.isKeyDown(OpenTK.Input.Key)">
            <summary>
            returns true if a specific key is held down
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Simplex.Windowing.ApplicationWindow.RenderGui(System.Single)">
            <summary>
            renders the gui
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:Simplex.Windowing.ApplicationWindow.RenderScene(System.Single)">
            <summary>
            renders the scene
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:Simplex.Windowing.ApplicationWindow.SwapBuffers">
            <summary>
            swaps the buffers of the opengl context
            </summary>
        </member>
    </members>
</doc>
